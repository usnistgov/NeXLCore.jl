var documenterSearchIndex = {"docs":
[{"location":"Au60Ag40unc/#Computing-the-Composition-of-SRM-481","page":"Mass Fraction Uncertainty","title":"Computing the Composition of SRM-481","text":"","category":"section"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"One of the Au-Ag wires is nominally 59.50±1.20% Au and 40.20±0.90% Ag according to the SRM certificate. We will use NeXLUncertainties and NeXLCore to compute various different representations of the composition (normalized, atom fraction, etc.)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"using NeXLCore\nusing DataFrames","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Let's set up the UncertainValues object containing the input values which include the mass fractions of each element and the nominal atomic weight of each element with uncertainties.","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"mat = \"Au60Ag40\"\ninplbls = [ MassFractionLabel(mat,n\"Ag\"), AtomicWeightLabel(mat,n\"Ag\"),\n            MassFractionLabel(mat,n\"Au\"), AtomicWeightLabel(mat,n\"Au\") ]\ninpvals = [ 0.4020, 107.8682, 0.5950, 196.966570 ]\ninpcovs = [ (0.0090)^2 0 0 0; 0 (0.0002)^2 0 0; 0 0 (0.0120)^2 0; 0 0 0 (0.000004)^2 ]\ninputs = uvs(inplbls, inpvals, inpcovs)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Label Value  C[Ag,Au60Ag40] Az[Ag,Au60Ag40] C[Au,Au60Ag40] Az[Au,Au60Ag40]\nC[Ag,Au60Ag40] 4.02e-01  (9.00e-03)² 0.00e+00 0.00e+00 0.00e+00\nAz[Ag,Au60Ag40] 1.08e+02 ± 0.00e+00 (2.00e-04)² 0.00e+00 0.00e+00\nC[Au,Au60Ag40] 5.95e-01  0.00e+00 0.00e+00 (1.20e-02)² 0.00e+00\nAz[Au,Au60Ag40] 1.97e+02  0.00e+00 0.00e+00 0.00e+00 (4.00e-06)²","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"mf2comp(...) defined in NeXLCore takes the inputs and computes the atom fractions, normalized mass fractions, mean atomic number, and mean atomic weight while propagating uncertaities in the input variables into the output variables.  In both the case of the atom fraction and the normalized mass fraction, the normalization step introduces correlations between the output values.","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"afs = mf2comp( mat, inputs)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Label Value  C[Ag,Au60Ag40] Az[Ag,Au60Ag40] C[Au,Au60Ag40] Az[Au,Au60Ag40] A[Ag,Au60Ag40] A[Au,Au60Ag40] N[Ag,Au60Ag40] N[Au,Au60Ag40] MeanZ[Au60Ag40] MeanAz[Au60Ag40] Σ[Au60Ag40]\nC[Ag,Au60Ag40] 4.02e-01  (9.00e-03)² 0.00e+00 0.00e+00 0.00e+00 4.98e-05 -4.98e-05 4.85e-05 -4.85e-05 3.81e-03 8.74e-03 8.10e-05\nAz[Ag,Au60Ag40] 1.08e+02  0.00e+00 (2.00e-04)² 0.00e+00 0.00e+00 -9.17e-11 9.17e-11 0.00e+00 0.00e+00 0.00e+00 1.61e-08 0.00e+00\nC[Au,Au60Ag40] 5.95e-01  0.00e+00 0.00e+00 (1.20e-02)² 0.00e+00 -5.98e-05 5.98e-05 -5.82e-05 5.82e-05 1.14e-02 2.84e-02 1.44e-04\nAz[Au,Au60Ag40] 1.97e+02  0.00e+00 0.00e+00 0.00e+00 (4.00e-06)² 2.01e-14 -2.01e-14 0.00e+00 0.00e+00 0.00e+00 9.52e-12 0.00e+00\nA[Ag,Au60Ag40] 5.52e-01  4.98e-05 -9.17e-11 -5.98e-05 2.01e-14 (7.45e-03)² -5.55e-05 5.40e-05 -5.40e-05 -2.39e-03 -6.41e-03 -1.00e-05\nA[Au,Au60Ag40] 4.48e-01 ± -4.98e-05 9.17e-11 5.98e-05 -2.01e-14 -5.55e-05 (7.45e-03)² -5.40e-05 5.40e-05 2.39e-03 6.41e-03 1.00e-05\nN[Ag,Au60Ag40] 4.03e-01  4.85e-05 0.00e+00 -5.82e-05 0.00e+00 5.40e-05 -5.40e-05 (7.25e-03)² -5.26e-05 -2.32e-03 -6.24e-03 -9.75e-06\nN[Au,Au60Ag40] 5.97e-01  -4.85e-05 0.00e+00 5.82e-05 0.00e+00 -5.40e-05 5.40e-05 -5.26e-05 (7.25e-03)² 2.32e-03 6.24e-03 9.75e-06\nMeanZ[Au60Ag40] 6.59e+01  3.81e-03 0.00e+00 1.14e-02 0.00e+00 -2.39e-03 2.39e-03 -2.32e-03 2.32e-03 (1.04e+00)² 2.65e+00 1.52e-02\nMeanAz[Au60Ag40] 1.61e+02  8.74e-03 1.61e-08 2.84e-02 9.52e-12 -6.41e-03 6.41e-03 -6.24e-03 6.24e-03 2.65e+00 (2.56e+00)² 3.71e-02\nΣ[Au60Ag40] 9.97e-01  8.10e-05 0.00e+00 1.44e-04 0.00e+00 -1.00e-05 1.00e-05 -9.75e-06 9.75e-06 1.52e-02 3.71e-02 (1.50e-02)²","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"The data can also be output as a DataFrame to simplify presentation and exporting to CSV files.","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"asa(DataFrame,afs)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"11×13 DataFrame\n Row │ Variable          Values      C[Ag,Au60Ag40]  Az[Ag,Au60Ag40]  C[Au,\nAu60Ag40]  Az[Au,Au60Ag40]  A[Ag,Au60Ag40]  A[Au,Au60Ag40]  N[Ag,Au60Ag40] \n N[Au,Au ⋯\n     │ String            Float64     Float64         Float64          Float\n64         Float64          Float64         Float64         Float64        \n Float64 ⋯\n─────┼─────────────────────────────────────────────────────────────────────\n───────────────────────────────────────────────────────────────────────────\n──────────\n   1 │ C[Ag,Au60Ag40]      0.402         8.1e-5           0.0             0\n.0             0.0             4.98218e-5     -4.98218e-5       4.84855e-5 \n    -4.8 ⋯\n   2 │ Az[Ag,Au60Ag40]   107.868         0.0              4.0e-8          0\n.0             0.0            -9.1691e-11      9.1691e-11       0.0        \n     0.0\n   3 │ C[Au,Au60Ag40]      0.595         0.0              0.0             0\n.000144        0.0            -5.98419e-5      5.98419e-5      -5.82369e-5 \n     5.8\n   4 │ Az[Au,Au60Ag40]   196.967         0.0              0.0             0\n.0             1.6e-11         2.00857e-14    -2.00857e-14      0.0        \n     0.0\n   5 │ A[Ag,Au60Ag40]      0.552312      4.98218e-5      -9.1691e-11     -5\n.98419e-5      2.00857e-14     5.5513e-5      -5.5513e-5        5.40241e-5 \n    -5.4 ⋯\n   6 │ A[Au,Au60Ag40]      0.447688     -4.98218e-5       9.1691e-11      5\n.98419e-5     -2.00857e-14    -5.5513e-5       5.5513e-5       -5.40241e-5 \n     5.4\n   7 │ N[Ag,Au60Ag40]      0.40321       4.84855e-5       0.0            -5\n.82369e-5      0.0             5.40241e-5     -5.40241e-5       5.25751e-5 \n    -5.2\n   8 │ N[Au,Au60Ag40]      0.59679      -4.84855e-5       0.0             5\n.82369e-5      0.0            -5.40241e-5      5.40241e-5      -5.25751e-5 \n     5.2\n   9 │ MeanZ[Au60Ag40]    65.899         0.003807         0.0             0\n.011376        0.0            -0.00238589      0.00238589      -0.0023219  \n     0.0 ⋯\n  10 │ MeanAz[Au60Ag40]  160.558         0.00873732       1.608e-8        0\n.0283632       9.52e-12       -0.00641268      0.00641268      -0.00624068 \n     0.0\n  11 │ Σ[Au60Ag40]         0.997         8.1e-5           0.0             0\n.000144        0.0            -1.00202e-5      1.00202e-5      -9.75142e-6 \n     9.7\n                                                                           \n                                                                    4 colum\nns omitted","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"To access a single value, you can use bracket notation and the label associated with the desired parameter.","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"afs[MeanAz(mat)], afs[AtomicFractionLabel(mat,n\"Au\")], afs[NormMassFractionLabel(mat,n\"Au\")]","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"(161 ± 3, 0.4477 ± 0.0075, 0.5968 ± 0.0073)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Or you can iterate over all the labels.  Note this style of presentation is suitable if these numbers are to be reported as the final value in a calculation.  The full values+covariance matrix representation is required if the values will be used in subsequent calculations.","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"map(lbl->(lbl => afs[lbl]),labels(afs))","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"11-element Vector{Pair{A, UncertainValue} where A}:\n   C[Ag,Au60Ag40] => 0.4020 ± 0.0090\n  Az[Ag,Au60Ag40] => 107.8682 ± 0.0002\n   C[Au,Au60Ag40] => 0.595 ± 0.012\n  Az[Au,Au60Ag40] => 196.9666 ± 0.0000\n   A[Ag,Au60Ag40] => 0.5523 ± 0.0075\n   A[Au,Au60Ag40] => 0.4477 ± 0.0075\n   N[Ag,Au60Ag40] => 0.4032 ± 0.0073\n   N[Au,Au60Ag40] => 0.5968 ± 0.0073\n  MeanZ[Au60Ag40] => 66 ± 1\n MeanAz[Au60Ag40] => 161 ± 3\n      Σ[Au60Ag40] => 0.997 ± 0.015","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Let's time this...","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"using BenchmarkTools\n@btime mf2comp( mat, inputs);","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"68.400 μs (826 allocations: 100.61 KiB)","category":"page"},{"location":"Au60Ag40unc/","page":"Mass Fraction Uncertainty","title":"Mass Fraction Uncertainty","text":"Not too shabby!?","category":"page"},{"location":"gettingstarted/#Getting-Started-With-NeXLCore","page":"Getting Started","title":"Getting Started With NeXLCore","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"NeXLCore is a Julia language library that provides the core data, algorithms and data structures for the NeXL collection of microanalysis libraries.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"It can be installed from the Julia package repo.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Pkg \nPkg.add(\"NeXLCore\")","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"or","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"> ]add NeXLCore","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Primarily NeXLCore provides:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Definitions of data types relevant to X-ray microanalysis\nElement : Borrowed from the third-party PeriodicTable library\nMaterial : Combinations of Elements\nSubShell : Representing K, L1, L2, L3, M1,... sub-shells\nAtomicSubShell : Representing a SubShell in a specific Element\nTransition : Representing a non-forbidden X-ray transition between SubShells - like \"K-L3\"\nCharXRay : Representing a Transition in a specific Element\nKRatio : A ratio of X-ray intensities\nAlgorithms to work on these data structures, including (but not limited to)\nenergy(xx) where xx may be an AtomicSubShell or a CharXRay (Always in eV!!!)\nmac(xx, yy) where xx may be an Element or Material and yy may be a CharXRay or a Float64\nNeXLCore defines two useful macros. Learn them, love them, use them...\nn\"???\" which creates Elements, SubShells, AtomicSubShells, Transitions and CharXRays from AbstractStrings\nmat\"???\" which creates Materials from AbstractStrings like mat\"AlNaSi3O8\"\nThroughout NeXL, units are always electron-volt (energy), centimeter (length), second (time), gram (mass) and angles are in radians even when it seems a little odd.\nA foolish consistency? I think not...\nNeXL uses Gadfly for plotting.\nMany things you'd want to plot can be plotted using using Gadfly; plot(x)\nHowever, to minimize overhead, plotting support is not loaded (thanks to Requires) until Gadfly is explicitly loaded by the user.\nPlots can be readily embedded into Jupyter notebooks and Weave documents.\nNeXL uses DataFrames for tabular data.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Let's get this party started...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Load the library","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using NeXLCore","category":"page"},{"location":"gettingstarted/#Element","page":"Getting Started","title":"Element","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Constructing Element objects","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> e1, e2, e3 = n\"Ca\", elements[20], parse(Element, \"Pu\")\n(Element(Calcium), Element(Calcium), Element(Plutonium))\n\njulia> es = [ n\"Ca\", n\"21\", n\"Ti\", n\"Vanadium\" ]\n4-element Vector{Element}:\n Element(Calcium)\n Element(Scandium)\n Element(Titanium)\n Element(Vanadium)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note the use of n\"??\".  We'll see a lot of this.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Elements come with lots of useful information...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> e3\nPlutonium (Pu), number 94:\n        category: actinide\n     atomic mass: 244.0 u\n         density: 19.816 g/cm³\n      molar heat: 35.5 J/mol⋅K\n   melting point: 912.5 K\n   boiling point: 3505.0 K\n           phase: Solid\n          shells: [2, 8, 18, 32, 24, 8, 2]\ne⁻-configuration: 1s² 2s² 2p⁶ 3s² 3p⁶ 4s² 3d¹⁰ 4p⁶ 5s² 4d¹⁰ 5p⁶ 6s² 4f¹⁴ 5d¹⁰ 6p⁶ 7s² 5f⁶\n      appearance: silvery white, tarnishing to dark gray in air\n         summary: Plutonium is a transuranic radioactive chemical element with symbol Pu and atomic number 94. It is an actinide metal of silvery-gray appearance that tarnishes when exposed to air, and forms a dull coating when oxidized. The element normally exhibits six allotropes and four oxidation states.\n   discovered by: Glenn T. Seaborg\n          source: https://en.wikipedia.org/wiki/Plutonium\n","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To help you to iterate over all elements for which there is a complete set of atomic and X-ray data there is the function","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> eachelement()\n99-element Vector{Element}:\n Element(Hydrogen)\n Element(Helium)\n Element(Lithium)\n Element(Beryllium)\n Element(Boron)\n Element(Carbon)\n Element(Nitrogen)\n Element(Oxygen)\n Element(Fluorine)\n Element(Neon)\n ⋮\n Element(Protactinium)\n Element(Uranium)\n Element(Neptunium)\n Element(Plutonium)\n Element(Americium)\n Element(Curium)\n Element(Berkelium)\n Element(Californium)\n Element(Einsteinium)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"As you can see, each element comes with many different properties which can be accessed by the field names. PeriodicTable uses Unitful to provide physical units for quantities.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> fieldnames(Element)\n(:name, :appearance, :atomic_mass, :boil, :category, :color, :cpk_hex, :density, :discovered_by, :el_config, :melt, :molar_heat, :named_by, :number, :period, :phase, :source, :spectral_img, :summary, :symbol, :xpos, :ypos, :shells)\n\njulia> e1.name, name(e1)\n(\"Calcium\", \"Calcium\")\n\njulia> e1.symbol, symbol(e1)\n(\"Ca\", \"Ca\")\n\njulia> e1.atomic_mass, a(e1)\n(40.0784 u, 40.0784)\n\njulia> e1.number, z(e1)\n(20, 20)\n\njulia> e1.boil\n1757.0 K\n\njulia> e1.density, density(e1)\n(1.55 g cm^-3, 1.55)\n\njulia> e1.el_config\n\"1s² 2s² 2p⁶ 3s² 3p⁶ 4s²\"","category":"page"},{"location":"gettingstarted/#Material","page":"Getting Started","title":"Material","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The Material structure carries composition information as mass fractions of the elements. This object also carries name, atomic weight, and other properties like density.  A simple way to create Material objects is the mat\"??\" macro. To get the mass fraction's out index the object with an element.  All the Elements in a Material are accessed via keys(...).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> albite = mat\"AlNaSi3O8\"\nAlNaSi3O8[O=0.4881,Na=0.0877,Al=0.1029,Si=0.3213]\n\njulia> albite[n\"Al\"], albite[n\"Na\"], albite[n\"Tc\"]\n(0.10289723395373596, 0.08767415772881798, 0.0)\n\njulia> keys(albite) # keys(...) for consistency with other Julia objects\nKeySet for a Dict{Element, Float64} with 4 entries. Keys:\n  Element(Aluminium)\n  Element(Sodium)\n  Element(Silicon)\n  Element(Oxygen)\n\njulia> collect(keys(albite)) # Now maybe this is a little more clear\n4-element Vector{Element}:\n Element(Aluminium)\n Element(Sodium)\n Element(Silicon)\n Element(Oxygen)\n\njulia> a(n\"Na\", albite)\n22.989769282","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You can enter mass fractions in directly using the mat\"??\" syntax.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> mat = mat\"0.8*Fe+0.15*Ni+0.05*Cr\"\n0⋅8⋅Fe+0⋅15⋅Ni+0⋅05⋅Cr[Cr=0.0500,Fe=0.8000,Ni=0.1500]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There are more sophisticated ways to create materials with additional properties.  For example, I could have created a richer definition of albite.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> albite = parse(Material, \"AlNaSi3O8\", name=\"Albite\", density=2.60, atomicweights=Dict(n\"Na\"=>23.0))\nAlbite[O=0.4881,Na=0.0877,Al=0.1029,Si=0.3213,2.60 g/cm³]\n\njulia> all(e->a(e)==a(e,albite), keys(albite)) # Not all are default\nfalse\n\njulia> a(n\"Na\", albite),  a(n\"O\", albite)\n(23.0, 15.999)\n\njulia> ss = parse(Material, \"0.8*Fe+0.15*Ni+0.05*Cr\", name=\"Stainless\", density=7.5)\nStainless[Cr=0.0500,Fe=0.8000,Ni=0.1500,7.50 g/cm³]\n\njulia> ss[n\"Fe\"], density(ss), name(ss)\n(0.8, 7.5, \"Stainless\")\n\njulia> all(e->a(e)==a(e,ss), keys(ss)) # The atomic weights are the default values (from PeriodicTable)\ntrue","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Alternatively, I could have built albite in terms of atom fractions.  Note that the mass fractions are different because the assumed atomic weight of sodium is different.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> albite2 = atomicfraction(\"Albite\", n\"Al\"=>1, n\"Na\"=>1, n\"Si\"=>3, n\"O\"=>8, properties=Dict{Symbol,Any}(:Density=>2.6), atomicweights=Dict(n\"Na\"=>22.0))\nAlbite[O=0.4900,Na=0.0842,Al=0.1033,Si=0.3225,2.60 g/cm³]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> using DataFrames\n\njulia> asa(DataFrame, albite2)\n4×7 DataFrame\n Row │ Material  Element  Z      A        C(z)       Norm[C(z)]  A(z)\n     │ String    String   Int64  Float64  Float64    Float64     Float64\n─────┼─────────────────────────────────────────────────────────────────────\n   1 │ Albite    O            8  15.999   0.489962    0.489962   0.615385\n   2 │ Albite    Na          11  22.0     0.0842174   0.0842174  0.0769231\n   3 │ Albite    Al          13  26.9815  0.103287    0.103287   0.0769231\n   4 │ Albite    Si          14  28.085   0.322534    0.322534   0.230769","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There are many methods for transforming representation of the composition.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ss = parse(Material,\"0.78*Fe+0.15*Ni+0.04*Cr\",name=\"Stainless\")\nStainless[Cr=0.0400,Fe=0.7800,Ni=0.1500]\n\njulia> analyticaltotal(ss)\n0.9700000000000001\n\njulia> atomicfraction(ss)\nDict{Element, Float64} with 3 entries:\n  Element(Iron)     => 0.807719\n  Element(Chromium) => 0.0444878\n  Element(Nickel)   => 0.147793\n\njulia> normalizedmassfraction(ss)\nDict{Element, Float64} with 3 entries:\n  Element(Iron)     => 0.804124\n  Element(Chromium) => 0.0412371\n  Element(Nickel)   => 0.154639\n\njulia> asnormalized(ss)\nN[Stainless,1.0][Cr=0.0412,Fe=0.8041,Ni=0.1546]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> compare(ss, asnormalized(ss))\n3×11 DataFrame\n Row │ Material 1  Material 2        Elm     C₁(z)      C₂(z)    ΔC          Δ ⋯\n     │ String      String            String  Float64    Float64  Float64     F ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ Stainless   N[Stainless,1.0]  Fe      0.804124      0.78  0.0241237     ⋯\n   2 │ Stainless   N[Stainless,1.0]  Cr      0.0412371     0.04  0.00123711\n   3 │ Stainless   N[Stainless,1.0]  Ni      0.154639      0.15  0.00463918\n                                                               5 columns omitted","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"It is also possible to define materials using NeXLUncertainties.UncertainValues.  However, it is better to use the full uncertainty calculation to perform transforms since this handles correlated quantities correctly.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ss=material(\"Stainless\",n\"Fe\"=>uv(0.79,0.01),n\"Ni\"=>uv(0.15,0.003),n\"Cr\"=>uv(0.04,0.002))\nStainless[Cr=0.0400,Fe=0.7900,Ni=0.1500]\n\njulia> ss[n\"Fe\"]\n0.790 ± 0.010\n\njulia> atomicfraction(ss)[n\"Fe\"]\n0.810 ± 0.010","category":"page"},{"location":"gettingstarted/#SubShell","page":"Getting Started","title":"SubShell","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"SubShell objects are not often used directly but are occasionally returned by other methods so I'll just mention them in passing.  SubShell represent the notion of a sub-shell independent of which element it is associated with.  There are properties of sub-shells that don't depend on the element like the angular momentum quantum numbers.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ss = n\"L3\"\nL3\n\njulia> shell(ss) # Shells are identified by a Char\nL\n\njulia> NeXLCore.n(ss), NeXLCore.l(ss), NeXLCore.j(ss)\n(2, 1, 3//2)\n\njulia> allsubshells\n49-element Vector{SubShell}:\n K\n L1\n L2\n L3\n M1\n M2\n M3\n M4\n M5\n N1\n ⋮\n Q5\n Q6\n Q7\n Q8\n Q9\n Q10\n Q11\n Q12\n Q13\n\njulia> ksubshells, lsubshells, msubshells, nsubshells\n((K,), (L1, L2, L3), (M1, M2, M3, M4, M5), (N1, N2, N3, N4, N5, N6, N7))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There is one gotcha with SubShells and the n\"??\" notation.  What is n\"K\"? Potassium or the K-subshell?  The answer for NeXL is potassium.  The K-subshell is n\"K1\" like the first L-subshell is n\"L1\".  (This is rarely ever an issue)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> n\"K1\", n\"K\"\n(K, Element(Potassium))","category":"page"},{"location":"gettingstarted/#AtomicSubShell","page":"Getting Started","title":"AtomicSubShell","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"AtomicSubShell joins an Element to a SubShell.  You'll only be permitted to create AtomicSubShell objects for sub-shells which exist for the ground state of the element. (X-ray microanalysis only deals with ground state atoms.  Astronomers and plasma physicists not so much...)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ass = n\"Fe L3\"\nFe L3\n\njulia> shell(ass), ass.subshell\n(L, L3)\n\njulia> jumpratio(ass)\n6.3305\n\njulia> has(n\"C\",n\"L3\"), has(n\"C\",n\"L2\")  # Carbon Kα1 is K-L2!!!\n(true, true)\n\njulia> n\"C L2\" # works while n\"C L3\" throws an exception\nC L2\n\njulia> energy(ass), energy(n\"Ca K\")\n(713.0, 4041.0)\n\njulia> kk=n\"K K\"\nK K\n\njulia> element(kk), shell(kk), kk.subshell # This works as you'd expect. (Relevant to the earlier gotcha notice...)\n(Element(Potassium), K, K)","category":"page"},{"location":"gettingstarted/#Transition","page":"Getting Started","title":"Transition","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Transitions are the analog to SubShell.  They represent the non-element related information associated with optical (in the broad sense) transitions.  You can only create Transitions for transitions with a non-negligible transition rate in some element.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> trs = n\"K-L3\", n\"L3-M5\", n\"M5-N7\"\n(K-L3, L3-M5, M5-N7)\n\njulia> alltransitions\n(K-L2, K-L3, K-M2, K-M3, K-M4, K-M5, K-N2, K-N3, K-N4, K-N5, K-O2, K-O3, K-O4, K-O5, K-P2, K-P3, L1-L2, L1-L3, L1-M2, L1-M3, L1-M4, L1-M5, L1-N2, L1-N3, L1-N4, L1-N5, L1-O2, L1-O3, L1-O4, L1-O5, L1-P2, L1-P3, L2-L3, L2-M1, L2-M3, L2-M4, L2-N1, L2-N3, L2-N4, L2-N6, L2-O1, L2-O3, L2-O4, L2-O6, L2-P1, L2-P3, L2-Q1, L3-M1, L3-M2, L3-M3, L3-M4, L3-M5, L3-N1, L3-N2, L3-N3, L3-N4, L3-N5, L3-N6, L3-N7, L3-O1, L3-O2, L3-O3, L3-O4, L3-O5, L3-O6, L3-O7, L3-P1, L3-P2, L3-P3, L3-Q1, M1-M2, M1-M3, M1-N2, M1-N3, M1-O2, M1-O3, M1-P2, M1-P3, M2-M4, M2-N1, M2-N4, M2-O1, M2-O4, M2-P1, M2-Q1, M3-M4, M3-M5, M3-N1, M3-N4, M3-N5, M3-O1, M3-O4, M3-O5, M3-P1, M3-Q1, M4-N2, M4-N3, M4-N6, M4-O2, M4-O3, M4-O6, M4-P2, M4-P3, M5-N3, M5-N6, M5-N7, M5-O3, M5-O6, M5-O7, M5-P3)\n\njulia> ktransitions\n(K-L2, K-L3, K-M2, K-M3, K-M4, K-M5, K-N2, K-N3, K-N4, K-N5, K-O2, K-O3, K-O4, K-O5, K-P2, K-P3)\n\njulia> kalpha, kbeta\n((K-L2, K-L3), (K-M3, K-N3, K-N2, K-M2, K-N5, K-N4, K-M5, K-M4))\n\njulia> ltransitions\n(L1-L2, L1-L3, L1-M2, L1-M3, L1-M4, L1-M5, L1-N2, L1-N3, L1-N4, L1-N5, L1-O2, L1-O3, L1-O4, L1-O5, L1-P2, L1-P3, L2-L3, L2-M1, L2-M3, L2-M4, L2-N1, L2-N3, L2-N4, L2-N6, L2-O1, L2-O3, L2-O4, L2-O6, L2-P1, L2-P3, L2-Q1, L3-M1, L3-M2, L3-M3, L3-M4, L3-M5, L3-N1, L3-N2, L3-N3, L3-N4, L3-N5, L3-N6, L3-N7, L3-O1, L3-O2, L3-O3, L3-O4, L3-O5, L3-O6, L3-O7, L3-P1, L3-P2, L3-P3, L3-Q1)\n\njulia> mtransitions\n(M1-M2, M1-M3, M1-N2, M1-N3, M1-O2, M1-O3, M1-P2, M1-P3, M2-M4, M2-N1, M2-N4, M2-O1, M2-O4, M2-P1, M2-Q1, M3-M4, M3-M5, M3-N1, M3-N4, M3-N5, M3-O1, M3-O4, M3-O5, M3-P1, M3-Q1, M4-N2, M4-N3, M4-N6, M4-O2, M4-O3, M4-O6, M4-P2, M4-P3, M5-N3, M5-N6, M5-N7, M5-O3, M5-O6, M5-O7, M5-P3)\n\njulia> shell.( trs )\n(K, L, M)\n\njulia> inner.( trs )\n(K, L3, M5)\n\njulia> outer.( trs )\n(L3, M5, N7)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The lists of transitions will suddenly seem useful in just a minute...","category":"page"},{"location":"gettingstarted/#CharXRay","page":"Getting Started","title":"CharXRay","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Finally! What we came here for... CharXRay represent a specific Transition in a specific Element.  Again you can only create CharXRay objects for characteristic X-rays with non-negligible transition rates. (i.e. Ones that you might see in a X-ray spectrum or wavescan.)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"First, let's create some characteristic X-rays using n\"??\" notation or characteristic(...)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> feka1, fela = n\"Fe K-L3\", n\"Fe L3-M5\"\n(Fe K-L3, Fe L3-M5)\n\njulia> feka = characteristic(n\"Fe\",kalpha) # Filters kalpha to produce only those CharXRay that exist for Fe\n2-element Vector{CharXRay}:\n Fe K-L2\n Fe K-L3\n\njulia> fekb = characteristic(n\"Fe\",kbeta)\n4-element Vector{CharXRay}:\n Fe K-M2\n Fe K-M3\n Fe K-M4\n Fe K-M5","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Some properties of characteristic X-rays:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> inner.(feka)\n2-element Vector{AtomicSubShell}:\n Fe K\n Fe K\n\njulia> outer.(feka)\n2-element Vector{AtomicSubShell}:\n Fe L2\n Fe L3\n\njulia> transition.(feka)\n2-element Vector{Transition}:\n K-L2\n K-L3\n\njulia> all(s->s==Shell(1), shell.(feka))\ntrue\n\njulia> all(e->e==n\"Fe\", element.(feka))\ntrue","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Let's extract some energy-related properties from these objects.  Of course, it is in eV.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> energy.(feka) # The x-ray energy\n2-element Vector{Float64}:\n 6391.0\n 6404.0\n\njulia> edgeenergy.(feka) # ionization edge energy\n2-element Vector{Float64}:\n 7117.0\n 7117.0","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Often we want to know the relative line-weights of the transitions.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> weight.(NormalizeByShell, characteristic(n\"Fe\", ltransitions)) # sum(...)=1\n14-element Vector{Float64}:\n 0.018496071140949553\n 0.027458978447654655\n 5.6159001496276406e-5\n 7.626531067395561e-5\n 0.015900322795429925\n 0.0005602847601257496\n 0.19820901939432387\n 0.00504988682492424\n 0.07653042038194807\n 0.0005808975914771919\n 0.0005656442630357776\n 0.014616501978985185\n 0.6272246604554809\n 0.009782467973760324\n\njulia> weight.(NormalizeBySubShell, characteristic(n\"Fe\", ltransitions)) # sum(...)=3\n14-element Vector{Float64}:\n 0.36281109751121987\n 0.5386236910104718\n 0.0011015911872705015\n 0.001495988032095743\n 0.07236645722658287\n 0.00255\n 0.9021002094400838\n 0.022983333333333335\n 0.10493673137495092\n 0.0007965132585051979\n 0.0007755982495291314\n 0.02004180735131569\n 0.8600358573423819\n 0.013413492423317293\n\njulia> brightest(characteristic(n\"Fe\", ltransitions))\nFe L3-M5","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Some other X-ray related properties...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> λ.(feka)  # this is \\lambda (wavelength in cm)\n2-element Vector{Float64}:\n 1.9399811990799606e-8\n 1.9360430735977558e-8\n\njulia> ν.(feka)  # this is \\nu (frequency in 1/s)\n2-element Vector{Float64}:\n 1.545336924616471e18\n 1.5484803106311816e18\n\njulia> ω.(feka)  # this is \\omega (angular frequency in radian/s)\n2-element Vector{Float64}:\n 9.7096382593923e18\n 9.729388736214723e18\n\njulia> wavenumber.(feka) # In 1/cm\n2-element Vector{Float64}:\n 5.1546891303598806e7\n 5.165174337478434e7","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Finally, mass absorption coefficients.  MACs quantify the degree to which X-rays are absorbed as they travel through material. MACs are available for Element or for Material.  Here we are accepting the default (FFAST) algorithm for the MACs except in the last line.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> mac( n\"Ni\", n\"Fe K-L3\") # In cm²/g\n83.47985630233804\n\njulia> Dict(map(cxr->(cxr=>( mac(n\"Ni\",cxr), weight(NormalizeToUnity, cxr))), characteristic(n\"Ni\", ltransitions)))\nDict{CharXRay, Tuple{Float64, Float64}} with 14 entries:\n  Ni L3-M5 => (1698.0, 1.0)\n  Ni L1-M3 => (11180.9, 0.0365307)\n  Ni L2-M3 => (1909.69, 0.000899998)\n  Ni L1-M2 => (11241.6, 0.0238633)\n  Ni L1-M4 => (9484.41, 8.56925e-5)\n  Ni L2-N1 => (9646.64, 0.00699209)\n  Ni L2-M1 => (2149.93, 0.0220208)\n  Ni L3-M3 => (1997.62, 0.000923545)\n  Ni L3-N1 => (1688.03, 0.0132159)\n  Ni L2-M4 => (9714.16, 0.299355)\n  Ni L3-M1 => (2254.4, 0.0900353)\n  Ni L3-M2 => (2008.36, 0.00095055)\n  Ni L3-M4 => (1698.0, 0.0354701)\n  Ni L1-M5 => (9484.41, 0.000112495)\n\njulia> mac( mat\"0.8*Fe+0.15*Ni+0.05*Cr\", n\"C K-L2\") # Carbon K-L3 in stainless steel (interpreted as mass fractions of elements)\n12267.458123099908\n\njulia> mac( mat\"AlNaSi3O8\", n\"O K-L3\") # O K-L3 in Albite (interpreted as a chemical formular)\n3843.7861561329455\n\njulia> mac( mat\"AlNaSi3O8\", n\"O K-L3\", DefaultAlgorithm), mac( mat\"AlNaSi3O8\", n\"O K-L3\", DTSA) # Compare and contrast...\n(3843.7861561329455, 4121.0562998626965)","category":"page"},{"location":"gettingstarted/#KRatio","page":"Getting Started","title":"KRatio","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"k-ratios are the core quantity for X-ray microanalysis.  We measure intensities but k-ratios make the intensities meaningful.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> kr = KRatio(\n             [n\"Fe K-L3\", n\"Fe K-L2\" ],\n             Dict(:BeamEnergy=>20.0e3, :TakeOffAngle=>deg2rad(40.0)), # Unknown properties\n             Dict(:BeamEnergy=>20.0e3, :TakeOffAngle=>deg2rad(40.0)), # Standard properties\n             mat\"Fe2O3\", # Standard composition\n             uv(0.343563,0.0123105)) # The k-ratio value\nk[Fe K-L3 + 1 other, Fe2O3] = 0.344 ± 0.012","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Combine k-ratios together in Vector.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> props =  ( Dict(:BeamEnergy=>20.0e3, :TakeOffAngle=>deg2rad(40.0)),\n                  Dict(:BeamEnergy=>20.0e3, :TakeOffAngle=>deg2rad(40.0)))\n(Dict(:BeamEnergy => 20000.0, :TakeOffAngle => 0.6981317007977318), Dict(:BeamEnergy => 20000.0, :TakeOffAngle => 0.6981317007977318))\n\njulia> krs = [\n         KRatio(characteristic(n\"O\", ktransitions), props..., mat\"SiO2\", uv(0.984390, 0.00233)),\n         KRatio(characteristic(n\"Na\", ktransitions), props..., mat\"NaCl\", uv(0.155406, 0.00093)),\n         KRatio(characteristic(n\"Al\", ktransitions), props..., mat\"Al\", uv(0.068536, 0.000733)),\n         KRatio(characteristic(n\"Si\", ktransitions), props..., mat\"Si\", uv(0.219054, 0.00023)),\n         KRatio(characteristic(n\"Th\", mtransitions), props..., mat\"Th\", uv(-0.00023, 0.00046)),\n       ]\n5-element Vector{KRatio}:\n k[O K-L3 + 1 other, SiO2] = 0.9844 ± 0.0023\n k[Na K-L3 + 1 other, NaCl] = 0.1554 ± 0.0009\n k[Al K-L3 + 3 others, Al] = 0.0685 ± 0.0007\n k[Si K-L3 + 3 others, Si] = 0.2190 ± 0.0002\n k[Th M5-N7 + 31 others, Th] = -0.0002 ± 0.0005","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> nonnegk.(krs)\n5-element Vector{UncertainValue}:\n 0.9844 ± 0.0023\n 0.1554 ± 0.0009\n 0.0685 ± 0.0007\n 0.2191 ± 0.0002\n 0.0000 ± 0.0005\n\njulia> elms(krs)\nSet{Element} with 5 elements:\n  Element(Aluminium)\n  Element(Sodium)\n  Element(Thorium)\n  Element(Oxygen)\n  Element(Silicon)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"KRatio objects match well with individual spectra or individual point acqusitions in WDS.  For hyper-spectra, them KRatios object type might be more appropriate.  KRatios assumes that all the properties are in common for all the entries in the object so it maintains only one copy.","category":"page"},{"location":"gettingstarted/#Monte-Carlo","page":"Getting Started","title":"Monte Carlo","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"NeXLCore also includes a rudimentary Monte Carlo simulator of electron trajectories.  While it is currently limited to modeling electron trajectories, it can be extended to handle quite complex sample geometries because it is based on  the GeometryBasics package that defines both simple and meshed shapes.   Currently, basic blocks and spheres have been implemented.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> # Build a alumina coated silica particle on a carbon substrate\n       mat = parse(Material, \"SiO2\", density=2.648)\nSiO2[O=0.5326,Si=0.4674,2.65 g/cm³]\n\njulia> sample = coated_particle(mat, 1.0e-4, parse(Material, \"Al2O3\", density=3.99), 0.1e-4, parse(Material, \"C\", density=2.0))\nRegion[Chamber, GeometryBasics.Rect3{Float64}([-100.0, -100.0, -100.0], [200.0, 200.0, 200.0]), H[H=1.0000,0.00 g/cm³], 2 children]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Now let's run a MC simulation to compute the path length of an electron in a material.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Gadfly # for plot(...)\n\n# Each call to the trajectory function runs a single electron trajecory while calling the `do`\n# clause at each elastic scatter point.  The arguments to the do clause are a representation\n# of the electron and the Region in which the last step occured.\nfunction mc_path_length(e0, mat)\n  len=0.0\n  trajectory(gun(Electron, e0, 1.0e-6), bulk(mat)) do electron, region\n    len += region.material == mat ? NeXLCore.pathlength(electron) : 0.0\n  end\n  return len\nend\n# Let's look at the path-length as a function of incident energy.\n# The downward spikes are ???                (Backscattered e⁻)\nplot(e0->mc_path_length(e0,mat), 1.0e3, 20.0e3)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or a second example...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# Let's look at the number of scatter events as a function of incident energy.\nfunction mc_n_scatters(e0, mat)\n  cx=0\n  trajectory(gun(Electron, e0, 1.0e-6), bulk(mat)) do electron, region\n    cx += 1\n  end\n  return cx\nend\n\nplot(e0->mc_n_scatters(e0, mat), 1.0e3, 20.0e3)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There is more but this should get you started.  As always, the code is the ultimate resource and you have it in your hands.  Please report any bugs you find at NeXLCore.","category":"page"},{"location":"gettingstarted/#Appendix:-Plotting-with-Gadfly","page":"Getting Started","title":"Appendix: Plotting with Gadfly","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"There are a number of helpful plotting methods to take an overhead look at various NeXLCore attributes.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Plot the X-ray energy for all transitions in all elements","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Gadfly\ndisplay(plot(collect(ktransitions), mode = :Energy))\ndisplay(plot(collect(ltransitions), mode = :Energy))\ndisplay(plot(collect(mtransitions), mode = :Energy))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Plot the X-ray line weight for all transitions","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"display(plot(collect(ktransitions), mode = :Weight))\ndisplay(plot(collect(ltransitions), mode = :Weight))\ndisplay(plot(collect(mtransitions), mode = :Weight))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Plot the edge energy for all subshells in all elements.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"display(plot(collect(ksubshells), :EdgeEnergy))\ndisplay(plot(collect(lsubshells), :EdgeEnergy))\ndisplay(plot(collect(msubshells), :EdgeEnergy))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Plot the fluorescence yield for all subshells in all elements.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"display(plot(collect(ksubshells), :FluorescenceYield))\ndisplay(plot(collect(lsubshells), :FluorescenceYield))\ndisplay(plot(collect(msubshells), :FluorescenceYield))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Finally, to compare MAC algorithms...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"display(NeXLCore.compareMACs(n\"C\"))\ndisplay(NeXLCore.compareMACs(n\"U\"))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or MAC algorithms one at a time...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"display(plot(DefaultAlgorithm, n\"Ag\"))\ndisplay(plot(DTSA, n\"Au\"))","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: ) (Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or many elements at once...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"plot(DefaultAlgorithm, collect(keys(albite)),xmax=5.0e3)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or a Material MAC...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"plot(DefaultAlgorithm, [keys(albite)..., albite], xmax=5.0e3)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"eta/#Comparing-η-(Backscatter-Coefficient)-Expressions","page":"Backscatter","title":"Comparing η (Backscatter Coefficient) Expressions","text":"","category":"section"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"using NeXLCore\nusing Gadfly","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"It seems that Donovan used measured values of the backscatter coefficient for Cu, Ag and Au in his paper (Donovan, John J., Nicholas E. Pingitore, and Andrew Westphal. Compositional averaging of backscatter intensities in compounds. Microscopy and Microanalysis 9, no. 3 (2003): 202-215.)","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"struct Donovanη <: NeXLCore.BackscatterCoefficient end\n\n# Use Donovan's measured Cu, Ag and Au values\nfunction NeXLCore.η(::Type{Donovanη}, elm::Element, e0::Float64)\n    if elm==n\"Au\"\n        return 0.48523489932885905\n    elseif elm==n\"Cu\"\n        return 0.31744966442953015\n    elseif elm==n\"Ag\"\n        return 0.4118568232662192\n    else\n        return NaN64\n    end\nend","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"Compare the measured backscatter coefficient with various empirical expressions.","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"elms = elements[1:99]\nalgs = ( Donovanη, LoveScott1978η, August1989η, Pouchou1991η, Tomlin1963 )\nlyrs = map(l->layer(x=z.(elms), y=map(elm->η(l[1], elm, 15.0e3), elms), Gadfly.Theme(default_color = l[2])), zip(algs, NeXLPalette[1:5]))\nplot(lyrs..., Guide.xlabel(\"Atomic Number\"), Guide.ylabel(\"η\"), #\n    Guide.manual_color_key(\"Algorithm\", [ repr.(algs)... ], color = NeXLPalette[1:5]))","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"(Image: )","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"Compare the empirical expressions with measured values taken from Donovan's paper.","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"#These values are extracted from Figure 2c in Donovan.\ndonovanelastic = (\n ( \"20Au80Cu\", \"0.201*Au+0.798*Cu\", 0.3577, 0.3569 ),\n ( \"40Au60Cu\", \"0.401*Au+0.599*Cu\", 0.3949, 0.3928 ),\n ( \"60Au40Cu\", \"0.603*Au+0.396*Cu\", 0.4326, 0.4264 ),\n ( \"80Au20Cu\", \"0.801*Au+0.198*Cu\", 0.4679, 0.4569 ),\n ( \"20Au80Ag\", \"0.224*Au+0.775*Ag\", 0.4290, 0.4297 ),\n ( \"40Au60Ag\", \"0.400*Au+0.599*Ag\", 0.4386, 0.4427 ),\n ( \"60Au40Ag\", \"0.600*Au+0.399*Ag\", 0.4604, 0.4575 ),\n ( \"80Au20Ag\", \"0.800*Au+0.199*Ag\", 0.4829, 0.4714 ))\n\ndata = layer(x=collect(map(de->de[3], donovanelastic)), y=collect(map(de->de[4], donovanelastic)), shape=[Shape.star1], Gadfly.Theme(default_color=NeXLPalette[6]))\ncalcs = map(l->layer(x=collect(map(de->de[3], donovanelastic)), y=collect(map(de->η(l[1], parse(Material,de[2]), 20.0e3), donovanelastic)), Gadfly.Theme(default_color=l[2])), zip(algs, NeXLPalette[1:4]))\n# map(de->η(Donovanη, parse(Material, de[2]), 20.0e3), donovanelastic)\nplot(data, calcs..., Guide.xlabel(\"Measured\"), Guide.ylabel(\"Computed\"), #\n    Guide.manual_color_key(\"Algorithm\", [ repr.(algs)...,\"Data\" ], color = NeXLPalette[1:6]),\n    Geom.abline(color=\"red\", style=:dash), intercept=[0,], slope=[1,])","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"(Image: )","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"This plot demonstrates that Dononvan used the measured values for the Au, Ag and Cu backscatter coefficients for the computations in his article.","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"\ndisplay(plot(x=collect(map(de->de[4], donovanelastic)), y=collect(map(de->η(Donovanη, parse(Material,de[2]), 20.0e3), donovanelastic)),\n    Geom.point, Guide.xlabel(\"Article\"), Guide.ylabel(\"Computed\"), #\n        intercept=[0], slope=[1], Geom.abline(color=\"red\", style=:dash)))","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"(Image: )","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"Compare to backscatter data extracted from Figure 1 in August 1989. August, H‐J., and J. Wernisch. Analytical expressions for the electron backscattering coefficient. Physica Status Solidi (a) 114, no. 2 (1989): 629-633.","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"backscatterdata = (\n  ( n\"C\", 3.977556222841125, 0.08356768966987504 ),\n  ( n\"C\", 5.038510038011086, 0.08062840761673218 ),\n  ( n\"C\", 7.389708884070725, 0.07251136250238138 ),\n  ( n\"C\", 9.888325425696948, 0.06740617430668328 ),\n  ( n\"C\", 15.036604947791457, 0.05720486977347572 ),\n  ( n\"C\", 19.956500439985124, 0.048491349983217136 ),\n  ( n\"C\", 30.83002966497628, 0.05064591630303639 ),\n  ( n\"C\", 40.95195543903258, 0.04975233827144809 ),\n  ( n\"Si\", 3.9070225254238835, 0.2044343242826428 ),\n  ( n\"Si\", 4.909689651731364, 0.18722727726320182 ),\n  ( n\"Si\", 7.482922226959749, 0.18287732126171402 ),\n  ( n\"Si\", 9.908737106621547, 0.17551550834157365 ),\n  ( n\"Si\", 15.134354219774838, 0.16381734720722846 ),\n  ( n\"Si\", 17.230860647186365, 0.17895827852419005 ),\n  ( n\"Si\", 20.277190626956124, 0.15812022026471678 ),\n  ( n\"Si\", 30.932314866054014, 0.15350491241120917 ),\n  ( n\"Si\", 25.101604811713585, 0.16591748237791543 ),\n  ( n\"Si\", 40.913173245275836, 0.14434460360515639 ),\n  ( n\"Cu\", 3.9802777802977403, 0.33131560087452716 ),\n  ( n\"Cu\", 5.045767524562056, 0.32462283749580423 ),\n  ( n\"Cu\", 7.472489590042729, 0.3165103283105478 ),\n  ( n\"Cu\", 9.891046983153558, 0.3151540855113353 ),\n  ( n\"Cu\", 15.10940660975588, 0.30946149449791804 ),\n  ( n\"Cu\", 19.948335767615283, 0.3052476163692609 ),\n  ( n\"Cu\", 30.829122479157412, 0.3013966125681523 ),\n  ( n\"Cu\", 40.806352115103735, 0.2952390888225635 ),\n  ( n\"Ag\", 3.9058885431502954, 0.39287269461403784 ),\n  ( n\"Ag\", 4.887690395623737, 0.39293166169226446 ),\n  ( n\"Ag\", 7.681142328383123, 0.3938501873338716 ),\n  ( n\"Ag\", 9.872222877411982, 0.39323103301249196 ),\n  ( n\"Ag\", 15.157941051065492, 0.39429924431421287 ),\n  ( n\"Ag\", 19.988705536555056, 0.39684163257159966 ),\n  ( n\"Ag\", 30.71481706597963, 0.3959843419727663 ),\n  ( n\"Ag\", 39.92320672043255, 0.40104190291297365 ),\n  ( n\"Ag\", 3.910651268699368, 0.4514315392221789 ),\n  ( n\"Ag\", 40.8376500258548, 0.39434006767606206 ),\n  ( n\"Au\", 5.1727735392040355, 0.46952536037956655 ),\n  ( n\"Au\", 7.4457276083860275, 0.46365586813146936 ),\n  ( n\"Au\", 9.999002095599241, 0.47582122996253323 ),\n  ( n\"Au\", 15.123694786403103, 0.48513802832234126 ),\n  ( n\"Au\", 20.032704048770313, 0.48543286371347444 ),\n  ( n\"Au\", 25.07461603360216, 0.500750696265116 ),\n  ( n\"Au\", 30.828895682702694, 0.4890842866344313 ),\n  ( n\"Au\", 40.86804075078699, 0.4941917427946766 ),\n  ( n\"C\", 19.639892589199047, 0.060484346508695386 ),\n  ( n\"C\", 29.76907584980632, 0.05358519835617925 ),\n  ( n\"C\", 39.96561765746478, 0.053446852518801324 ),\n  ( n\"C\", 48.729032667761345, 0.05172093149839885 ),\n  ( n\"Si\", 19.741270604457913, 0.1640940388819842 ),\n  ( n\"Si\", 29.794023459825283, 0.15794105106548972 ),\n  ( n\"Si\", 39.76943872413387, 0.15328491985013287 ),\n  ( n\"Si\", 48.83766816957118, 0.14932505375075977 ),\n  ( n\"Cu\", 9.887418239878073, 0.3181568705717992 ),\n  ( n\"Cu\", 15.108499423937008, 0.310212190763034 ),\n  ( n\"Cu\", 19.86827661909989, 0.3089965617657464 ),\n  ( n\"Cu\", 29.841877511770733, 0.3058418230806216 ),\n  ( n\"Cu\", 39.890094438043754, 0.30344231658970705 ),\n  ( n\"Cu\", 48.88642940733551, 0.2964751295007756 ),\n  ( n\"Ag\", 19.74671371937114, 0.40958986129128827 ),\n  ( n\"Ag\", 25.04241093703223, 0.4024004136767334 ),\n  ( n\"Ag\", 29.795837831463018, 0.40643965853525776 ),\n  ( n\"Ag\", 48.83494661211457, 0.40157714254610766 ),\n  ( n\"Au\", 9.989023051591658, 0.48407888887880907 ),\n  ( n\"Au\", 19.783454745035428, 0.504186662554091 ),\n  ( n\"Au\", 29.74616940787982, 0.5100402790503579 ),\n  ( n\"Au\", 39.94361840135715, 0.509151236947864 ),\n  ( n\"Au\", 49.0810207654834, 0.5104507806333971 ),\n  ( n\"C\", 4.804682893197015, 0.08662036995037692 ),\n  ( n\"C\", 9.731835871941648, 0.07190128003919039 ),\n  ( n\"C\", 29.683573586377705, 0.06183832134336076 ),\n  ( n\"Si\", 5.048035489109235, 0.1977460968330143 ),\n  ( n\"Si\", 9.896036505157351, 0.18602525605319736 ),\n  ( n\"Si\", 29.712149939672138, 0.16319138899220725 ),\n  ( n\"Cu\", 4.936678429842786, 0.3523940633760013 ),\n  ( n\"Cu\", 10.013063475791746, 0.3391854378532355 ),\n  ( n\"Cu\", 29.824640981212184, 0.3201050521178253 ),\n  ( n\"Ag\", 4.860474821057599, 0.41545254964574396 ),\n  ( n\"Ag\", 9.91599459317252, 0.41950993822064575 ),\n  ( n\"Ag\", 29.855031706144374, 0.41995672723643984 ),\n  ( n\"Au\", 5.075477860130091, 0.4875375348132558 ),\n  ( n\"Au\", 9.893541744155456, 0.5005896707822663 ),\n  ( n\"Au\", 19.782547559216557, 0.504937358819207 ),\n  ( n\"Au\", 29.733468806415623, 0.5205500267619817 ),\n  ( n\"Si\", 10.880559915087407, 0.18383213433607604 ),\n  ( n\"Si\", 13.298210122379366, 0.18322658780197948 ),\n  ( n\"Si\", 41.34816884542461, 0.15938574448204218 ),\n  ( n\"Cu\", 10.87738476472136, 0.311459571263982 ),\n  ( n\"Cu\", 13.217697380954544, 0.312350881331023 ),\n  ( n\"Cu\", 25.00294835391133, 0.3100557012092787 ),\n  ( n\"Cu\", 41.3250356070434, 0.3035284992424998 ),\n  ( n\"Ag\", 9.103382895918571, 0.40444611769828814 ),\n  ( n\"Ag\", 10.842231314240099, 0.40304905153722637 ),\n  ( n\"Ag\", 13.410020774555253, 0.40320327312643445 ),\n  ( n\"Ag\", 41.43004236557774, 0.40413540655532465 ),\n  ( n\"Au\", 9.159174823779157, 0.48327829739365513 ),\n  ( n\"Au\", 10.817056907766418, 0.4863808728941949 ),\n  ( n\"Au\", 13.380310438987216, 0.490288575808983 ),\n  ( n\"Au\", 17.23018025782221, 0.4920213007230271 ),\n  ( n\"Au\", 41.30847946584899, 0.5047287060808665 ) )\ncalcs = Layer[]\ne0s = 5:5:50\nalgs = ( LoveScott1978η, August1989η, Pouchou1991η, Tomlin1963 )\nfor (alg,col) in zip(algs, NeXLPalette[1:length(algs)]), elm in [n\"C\", n\"Si\", n\"Cu\", n\"Ag\", n\"Au\" ]\n  append!(calcs, layer(x=collect(e0s), y=collect(map(x->η(alg, elm, x*1000.0), e0s)), Geom.line, Gadfly.Theme(default_color=col)))\nend\ndata = layer(x=collect(map(d->d[2],backscatterdata)), y=collect(map(d->d[3],backscatterdata)), Geom.point, Gadfly.Theme(default_color=NeXLPalette[length(algs)+1]) )\nplot(data, calcs..., Guide.manual_color_key(\"Algorithm\", [ repr.(algs)...,\"Data\"], color = NeXLPalette[1:length(algs)+1]))","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"(Image: )","category":"page"},{"location":"eta/","page":"Backscatter","title":"Backscatter","text":"Overall, August1989η looks the best.","category":"page"},{"location":"fluoryield/#Fluorescence-Yields","page":"Fluorescence Yield","title":"Fluorescence Yields","text":"","category":"section"},{"location":"fluoryield/","page":"Fluorescence Yield","title":"Fluorescence Yield","text":"Let's investigate the fluorescence yield algorithms","category":"page"},{"location":"fluoryield/","page":"Fluorescence Yield","title":"Fluorescence Yield","text":"using NeXLCore\nusing Gadfly\n\nfunction plotyields(sss::SubShell...)\n  x, y, c = Float64[], Float64[], String[]\n  for ss in sss\n    for ass in filter(ass->z(ass)<97, atomicsubshells(ss))\n      push!(x, z(element(ass)))\n      push!(y,fluorescenceyield(ass))\n      push!(c,\"Default\")\n    end\n    for ass in filter(ass->z(ass)<97, atomicsubshells(sss[1]))\n      push!(x, z(element(ass)))\n      push!(y, meanfluorescenceyield(element(ass), shell(ass), NeXLCore.Bambynek1972))\n      push!(c, \"Bambynek\")\n    end\n  end\n  plot(x=x,y=y,color=c, Scale.y_log10(maxvalue=1.0))\nend\ndisplay(plotyields(ksubshells...))\ndisplay(plotyields(lsubshells...))\ndisplay(plotyields(msubshells...))","category":"page"},{"location":"fluoryield/","page":"Fluorescence Yield","title":"Fluorescence Yield","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"OByStoic/#Oxygen-by-stoichiometry","page":"O by Stoichiometry","title":"Oxygen by stoichiometry","text":"","category":"section"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"Using the asoxide(...) and obystoichiometry(...) functions","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"using NeXLCore","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"Start with a measured dictionary of mass fractions and use the function obystoichiometry(...) to calculate the mass fraction of oxygen (using the default set of valences.)","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"measured = Dict(n\"Al\"=>0.06986, n\"Si\"=>0.042324, n\"Ca\"=>0.063917, n\"Ti\"=>0.072963, n\"Zn\"=>0.11421, n\"Ge\"=>0.317435)\nmeasured[n\"O\"] = obystoichiometry(measured)","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"0.35244186490890517","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"material(\"ADM-65005a\",measured)","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"ADM-65005a[O=0.3524,Al=0.0699,Si=0.0423,Ca=0.0639,Ti=0.0730,Zn=0.1142,Ge=0.\n3174]","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"The variable NeXLCore.valences contains the default valences.  Copy it and then edit it to use different  assumptions.","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"altvalences = [ NeXLCore.defaultValences... ]\naltvalences[z(n\"Fe\")] = 3","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"3","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"In one case, FeO, and in the other Fe<sub>2</sub>O<sub>3</sub>.","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"( asoxide(n\"Fe\"), asoxide(n\"Fe\",valences=altvalences) )","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"(FeO[O=0.2227,Fe=0.7773], Fe₂O₃[O=0.3006,Fe=0.6994])","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"You can add a similar argument to obystoichiometry(...) also.","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"There is a second usage of asoxide(...) when a dictionary is provided.  This calculates a mixture of oxides from the mass fraction of each constituent oxide.  The results is a dictionary that maps the oxide to the mass-fractions of that oxide. This is intended to be used when you have measured the mass fraction of all elements except O and want to know how much oxygen is in the sample. ","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"asoxide(n\"Al\"=>0.0491,n\"Ca\"=>0.1090,n\"Fe\"=>0.0774,n\"Mg\"=>0.1166,n\"Si\"=>0.2120)","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"Dict{Material, AbstractFloat} with 5 entries:\n  SiO₂[O=0.5326,Si=0.4674]  => 0.453537\n  MgO[O=0.3970,Mg=0.6030]   => 0.193353\n  Al₂O₃[O=0.4707,Al=0.5293] => 0.0927716\n  FeO[O=0.2227,Fe=0.7773]   => 0.0995742\n  CaO[O=0.2853,Ca=0.7147]   => 0.152512","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"The result may be passed to the sum(...) function to produce a Material datum.","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"k412=sum(asoxide(n\"Al\"=>0.0491,n\"Ca\"=>0.1090,n\"Fe\"=>0.0774,n\"Mg\"=>0.1166,n\"Si\"=>0.2120), name=\"K412\")\nk411=sum(asoxide(n\"Mg\"=>0.0885,n\"Si\"=>0.2538,n\"Ca\"=>0.1106,n\"Fe\"=>0.1122), name=\"K411\")\nENV[\"Columns\"]=160\nusing DataFrames\nvcat(asa(DataFrame, k411),asa(DataFrame, k412))","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"11×7 DataFrame\n Row │ Material  Element  Z      A        C(z)      Norm[C(z)]  A(z)\n     │ String    String   Int64  Float64  Float64   Float64     Float64\n─────┼────────────────────────────────────────────────────────────────────\n   1 │ K411      O            8  15.999   0.423712   0.428506   0.602854\n   2 │ K411      Mg          12  24.305   0.0885     0.0895014  0.0828862\n   3 │ K411      Si          14  28.085   0.2538     0.256672   0.205708\n   4 │ K411      Ca          20  40.0784  0.1106     0.111851   0.0628173\n   5 │ K411      Fe          26  55.8452  0.1122     0.11347    0.0457342\n   6 │ K412      O            8  15.999   0.427648   0.431206   0.59398\n   7 │ K412      Mg          12  24.305   0.1166     0.11757    0.106606\n   8 │ K412      Al          13  26.9815  0.0491     0.0495085  0.0404383\n   9 │ K412      Si          14  28.085   0.212      0.213764   0.167741\n  10 │ K412      Ca          20  40.0784  0.109      0.109907   0.0604358\n  11 │ K412      Fe          26  55.8452  0.0774     0.078044   0.0307988","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"asa(DataFrame, [k411, k412] )","category":"page"},{"location":"OByStoic/","page":"O by Stoichiometry","title":"O by Stoichiometry","text":"2×8 DataFrame\n Row │ Material  O          Mg         Al         Si         Ca         Fe \n        Total\n     │ String    Abstract…  Abstract…  Abstract…  Abstract…  Abstract…  Abs\ntract…  Abstract…\n─────┼─────────────────────────────────────────────────────────────────────\n──────────────────\n   1 │ K411       0.423712     0.0885     0.0        0.2538     0.1106     \n0.1122   0.988812\n   2 │ K412       0.427648     0.1166     0.0491     0.212      0.109      \n0.0774   0.991748","category":"page"},{"location":"bremsstrahlung/#Comparing-Bremsstrahlung-Models","page":"Bremsstrahlung","title":"Comparing Bremsstrahlung Models","text":"","category":"section"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"Bremsstrahlung is the radiation (X-rays) produced when a charged particle (electron) decelerates.  Bremsstrahlung can be produced with any energy less than the incident charged particle's kinetic energy.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"using NeXLCore  # Implements the algorithms\nusing Gadfly    # Plotting library","category":"page"},{"location":"bremsstrahlung/#Kramer","page":"Bremsstrahlung","title":"Kramer","text":"","category":"section"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"The original model due Kramer was published in 1923.  This model shows the general structure seen in more recent models. First, the emitted intensity starts at zero at the incident beam energy and increases with decreasing X-ray energy.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"e0s = [ 2.0e3, 5.0e3, 10.0e3, 20.0e3]\n# The element is iron\ndisplay(plot([ e->bremsstrahlung(Kramers1923, e, e0, n\"Fe\") for e0 in e0s ], 1.0e3, 20.0e3,\n        Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"),\n        Guide.colorkey(title=\"Incident Energy\", labels= map(e0->\"$(e0/1000.0) keV\", e0s))))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"Second, higher Z elements produce more Bremsstrahlung intensity.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"elems = [n\"C\", n\"Al\", n\"Fe\", n\"Pb\"]\n# Incident beam energy is 20 keV\ndisplay(plot([ e->bremsstrahlung(Kramers1923, e, 20.0e3, elm) for elm in elems ], 2.0e3, 20.0e3,\n        Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"),\n        Guide.colorkey(title=\"Element\", labels= symbol.(elems))))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"The Bremsstrahlung produced by a compound is the atomic-fraction weighted sum of the contributions of each of the elements.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"mats = [ mat\"Na\", mat\"Al\", mat\"Si\", mat\"O\", mat\"NaAlSi3O8\" ]\n# Incident beam energy is 20 keV\ndisplay(plot([ e->bremsstrahlung(Kramers1923, e, 20.0e3, mat) for mat in mats ], 2.0e3, 20.0e3,\n        Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"),\n        Guide.colorkey(title=\"Material\", labels= name.(mats))))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"bremsstrahlung/#More-Recent-Models","page":"Bremsstrahlung","title":"More Recent Models","text":"","category":"section"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"More recent models can be divided into two classes - those with adjustable parameters and those without.  The models of Lifshin (1974) and Reed (1975) have an additional fittable parameter that adapts Kramer's expression for atomic number and/or incident beam energy.  The magnitude of this parameter can either be fitted to a measured spectrum or can be pre-determined.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"# Incident beam energy is 20 keV and element Ti\ndisplay(plot([ e->bremsstrahlung(Lifshin1974, e, 20.0e3, n\"Ti\", a=0.01), e->bremsstrahlung(Reed1975, e, 20.0e3, n\"Ti\", b=0.01) ], #\n        2.0e3, 20.0e3, Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"), #\n        Guide.colorkey(title=\"Author\", labels=[\"Lifshin\",\"Reed\"])))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"The models of Smith (1975), Small (1987), Trincavelli (1997) and Castellano (2004) are fully parameterized save for a single global scale factor.","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"models = [ Smith1975, Small1987, Trincavelli1997, Castellano2004a, Castellano2004b ]\n# Incident beam energy is 20 keV and element Ti\ndisplay(plot([ e->bremsstrahlung(model, e, 20.0e3, n\"Ti\") for model in models ], #\n        2.0e3, 20.0e3, Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"), #\n        Guide.colorkey(title=\"Author\", labels=[\"Smith\",\"Small\",\"Trincavelli\", \"Castellano (a)\", \"Castellano (b)\"])))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"models = [ Smith1975, Small1987, Trincavelli1997, Castellano2004a, Castellano2004b ]\n# Incident beam energy is 5 keV and element Ti\ndisplay(plot([ e->bremsstrahlung(model, e, 5.0e3, n\"Ti\") for model in models ], #\n        1.0e3, 5.0e3, Guide.xlabel(\"Energy (eV)\"), Guide.ylabel(\"Intensity (arb)\"), #\n        Guide.colorkey(title=\"Author\", labels=[\"Smith\",\"Small\",\"Trincavelli\", \"Castellano (a)\", \"Castellano (b)\"])))","category":"page"},{"location":"bremsstrahlung/","page":"Bremsstrahlung","title":"Bremsstrahlung","text":"(Image: )","category":"page"},{"location":"material/#Using-Material","page":"Materials","title":"Using Material","text":"","category":"section"},{"location":"material/","page":"Materials","title":"Materials","text":"Material is the data type for working with elemental compositions in NeXL.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> using NeXLCore","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"There are various mechanisms to construct a Material.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"If you know the chemical formula, these mechanisms parse the formula.  ","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m = mat\"Ca5(PO4)3F\" # Fluorapatite\nCa5(PO4)3F[O=0.3807,F=0.0377,P=0.1843,Ca=0.3974]\n\njulia> m = mat\"Ca₅(PO₄)₃F\" # Equivalent\nCa₅(PO₄)₃F[O=0.3807,F=0.0377,P=0.1843,Ca=0.3974]\n\njulia> m = parse(Material, \"Ca5(PO4)3F\", name = \"Fluorapatite\", density = 3.2)  # Equivalent with density of 3.2 g/cm³\nFluorapatite[O=0.3807,F=0.0377,P=0.1843,Ca=0.3974,3.20 g/cm³]\n\njulia> m = atomicfraction(\"Fluorapatite\", n\"Ca\"=>5, n\"P\"=>3, n\"O\"=>12, n\"F\"=>1, density=3.2)\nFluorapatite[O=0.3807,F=0.0377,P=0.1843,Ca=0.3974,3.20 g/cm³]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"You can construct pure elements with nominal densities.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> pure(n\"Fe\")\nPure Fe[Fe=1.0000,7.87 g/cm³]\n\njulia> pure(n\"Ca\")\nPure Ca[Ca=1.0000,1.55 g/cm³]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"These mechanisms necessarily produce an analytical total of unity (all the mass fractions sum to one.)","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Other methods are not so constrained.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m = material(\"Fluorapatite\", n\"Ca\"=>0.1843, n\"P\"=>0.3974, n\"O\"=>0.3807, n\"F\"=>0.0377, density=3.2)\nFluorapatite[O=0.3807,F=0.0377,P=0.3974,Ca=0.1843,3.20 g/cm³]\n\njulia> analyticaltotal(m)\n1.0001","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"It is possible with many of these methods to specify custom atomic weights.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> u1=parse(Material, \"U3O8\", atomicweights = Dict(n\"U\"=>235.0))\nU3O8[O=0.1537,U=0.8463]\n\njulia> u2=parse(Material, \"U3O8\", atomicweights = Dict(n\"U\"=>238.0))\nU3O8[O=0.1520,U=0.8480]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"It is possible to inspect a Material's atomic weight (either custom like U or default like O).","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> a(n\"U\", u1)\n235.0\n\njulia> a(n\"U\", u2)\n238.0\n\njulia> a(n\"O\", u1) == a(n\"O\", u2)\ntrue\n\njulia> a(n\"O\", u1) == a(n\"O\")\ntrue","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"The parse function can also do elemental mass-fraction math using the + and * operators.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> mat\"0.6*Al+0.4*O\"\n0⋅6⋅Al+0⋅4⋅O[O=0.4000,Al=0.6000]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"We can sum materials within the parse function...","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> mat\"0.6*Fe2O3+0.4*FeO2\"\n0⋅6⋅Fe2O3+0⋅4⋅FeO2[O=0.3260,Fe=0.6740]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"We can even use a lookup function to map names of materials to compositions.  Using this mechanism, it is possible to look up materials in a database by name or using some other custom mechanism.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> function mylibrary(name)\n           m = get(Dict(\"K411\"=>NeXLCore.srm470_k411, \"K412\"=>NeXLCore.srm470_k412), name, missing)\n           ismissing(m) ? missing : massfraction(m)\n       end\nmylibrary (generic function with 1 method)\n\njulia> m=parse(Material,\"0.59*K411+0.39*K412\", lookup=mylibrary)\n0⋅59⋅K411+0⋅39⋅K412[O=0.4167,Mg=0.0977,Al=0.0191,Si=0.2324,Ca=0.1077,Fe=0.0964]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Accessing the composition as mass-fraction is easy.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m[n\"Fe\"]\n0.0964 ± 0.0011\n\njulia> m[26]\n0.0964 ± 0.0011\n\njulia> m[92] # Elements that are not present return zero\n0.0e+00 ± 0.0e+00\n\njulia> nonneg(m, n\"Fe\")  # Sets negative mass fractions to zero\n0.09637164504859125\n\njulia> nonneg(material(\"Cruft\", n\"Fe\"=>-0.001, n\"Al\"=>0.999),n\"Fe\")\n0.0\n\njulia> [ el=>m[el] for el in keys(m) ]\n6-element Vector{Pair{Element, UncertainValue}}:\n Element(Aluminium) => 0.0191 ± 0.0004\n   Element(Calcium) => 0.1077 ± 0.0010\n      Element(Iron) => 0.0964 ± 0.0011\n Element(Magnesium) => 0.0977 ± 0.0009\n    Element(Oxygen) => 0.4167 ± 0.0011\n   Element(Silicon) => 0.2324 ± 0.0007\n\njulia> massfraction(m)\nDict{Element, AbstractFloat} with 6 entries:\n  Element(Aluminium) => 0.0191 ± 0.0004\n  Element(Calcium)   => 0.1077 ± 0.0010\n  Element(Iron)      => 0.0964 ± 0.0011\n  Element(Magnesium) => 0.0977 ± 0.0009\n  Element(Oxygen)    => 0.4167 ± 0.0011\n  Element(Silicon)   => 0.2324 ± 0.0007","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"There are various ways to produce the compositional data in a normalized form.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> normalizedmassfraction(m) # as a Dict(Element, T)\nDict{Element, UncertainValue} with 6 entries:\n  Element(Aluminium) => 0.0197 ± 0.0004\n  Element(Calcium)   => 0.1111 ± 0.0009\n  Element(Iron)      => 0.0993 ± 0.0010\n  Element(Magnesium) => 0.1007 ± 0.0008\n  Element(Oxygen)    => 0.4296 ± 0.0004\n  Element(Silicon)   => 0.2396 ± 0.0005\n\njulia> normalized(m,n\"Fe\") # as a number\n0.0993 ± 0.0011\n\njulia> asnormalized(m) # as a Material\nN[0⋅59⋅K411+0⋅39⋅K412,1.0][O=0.4296,Mg=0.1007,Al=0.0197,Si=0.2396,Ca=0.1111,Fe=0.0993]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"The equivalent in atomic-fraction is","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> atomicfraction(m)\nDict{Element, UncertainValue} with 6 entries:\n  Element(Aluminium) => 0.0163 ± 0.0004\n  Element(Calcium)   => 0.0618 ± 0.0006\n  Element(Iron)      => 0.0397 ± 0.0005\n  Element(Magnesium) => 0.0924 ± 0.0008\n  Element(Oxygen)    => 0.5993 ± 0.0016\n  Element(Silicon)   => 0.1904 ± 0.0005","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Defining and extracting default or custom material properties is easy","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m = parse(Material, \"NaAlSi3O8\", density=2.6, name=\"Albite\")\nAlbite[O=0.4881,Na=0.0877,Al=0.1029,Si=0.3213,2.60 g/cm³]\n\njulia> m[:MyProperty]=12.23\n12.23\n\njulia> m[:MyOtherProperty]=\"This or that\"\n\"This or that\"\n\njulia> m[:Density]\n2.6\n\njulia> m[:MyProperty]\n12.23\n\njulia> m[:MyOtherProperty]\n\"This or that\"","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"How many atoms of an element or all elements per gram of material?","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> atoms_per_g(m, n\"Al\")\n2.2966133865065546e21\n\njulia> atoms_per_g(n\"Al\")\n2.231948613447806e22","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Combining the density with the composition we get","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m[:Density]=3.0 # g/cm³\n3.0\n\njulia> atoms_per_cm³(m, n\"Al\")\n6.889840159519664e21\n\njulia> atoms_per_cm³(m)\n8.956792207375563e22","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"You will notice that when appropriate the mass-fractions and atomic-fractions can has associated uncertainties. Typically, the mass-fractions in a Material are represented by a Float64.  However, it is possible to  use UncertainValue from NeXLUncertainties.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> material(\"Stuff\",n\"Al\" => uv(0.0163,0.0004), n\"Ca\" => uv(0.0618,0.0006), n\"Fe\"=>uv(0.0397,0.0005), n\"Mg\"=>uv(0.0924,0.0008),n\"O\"=>uv(0.5993,0.0016))\nStuff[O=0.5993,Mg=0.0924,Al=0.0163,Ca=0.0618,Fe=0.0397]\n\njulia> parse(Material, \"(0.0163±0.0004)*Al+(0.0618±0.0006)*Ca+(0.0397±0.0005)*Fe+(0.0924±0.0008)*Mg+(0.5993±0.0016)*O\")\n(0⋅0163±0⋅0004)⋅Al+(0⋅0618±0⋅0006)⋅Ca+(0⋅0397±0⋅0005)⋅Fe+(0⋅0924±0⋅0008)⋅Mg+(0⋅5993±0⋅0016)⋅O[O=0.5993,Mg=0.0924,Al=0.0163,Ca=0.0618,Fe=0.0397]","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"To summarize the Material we can convert it to a DataFrame.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> using DataFrames\n\njulia> asa(DataFrame, m)\n4×7 DataFrame\n Row │ Material  Element  Z      A        C(z)       Norm[C(z)]  A(z)\n     │ String    String   Int64  Float64  Float64    Float64     Float64\n─────┼─────────────────────────────────────────────────────────────────────\n   1 │ Albite    O            8  15.999   0.488112    0.488112   0.615385\n   2 │ Albite    Na          11  22.9898  0.0876742   0.0876742  0.0769231\n   3 │ Albite    Al          13  26.9815  0.102897    0.102897   0.0769231\n   4 │ Albite    Si          14  28.085   0.321316    0.321316   0.230769","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Or we can summarize a Material[] in a DataFrame","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> asa(DataFrame, [ NeXLCore.srm470_k411, NeXLCore.srm470_k412])\n2×8 DataFrame\n Row │ Material      O          Mg         Al         Si         Ca         Fe         Total\n     │ String        Abstract…  Abstract…  Abstract…  Abstract…  Abstract…  Abstract…  Abstract…\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ SRM-470 K411   0.423686  0.0884662  0.0         0.253818   0.110564  0.112166   9.887000e-01 ± 0.0e+00\n   2 │ SRM-470 K412   0.427576  0.116568   0.0490621   0.211983   0.108991  0.0774201  9.916000e-01 ± 0.0e+00","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"We can also compare materials in a DataFrame","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> compare(NeXLCore.srm470_k411,NeXLCore.srm470_k412)\n6×11 DataFrame\n Row │ Material 1    Material 2    Elm     C₁(z)            C₂(z)      ΔC           ΔC/C         A₁(z)      A₂(z)      ΔA           ΔA/A\n     │ String        String        String  Uncertai…        Float64    Float64      Float64      Float64    Float64    Float64      Float64\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ SRM-470 K411  SRM-470 K412  Ca      0.1090 ± 0.0014  0.110564   -0.00157234  -0.0142211   0.0604414  0.0628022  -0.00236083  -0.0375915\n   2 │ SRM-470 K411  SRM-470 K412  Mg      0.1166 ± 0.0012  0.0884662   0.0281018    0.241076    0.106595   0.0828619   0.023733     0.222647\n   3 │ SRM-470 K411  SRM-470 K412  O       0.4276 ± 0.0018  0.423686    0.0038898    0.00909733  0.593982   0.602871   -0.00888897  -0.0147444\n   4 │ SRM-470 K411  SRM-470 K412  Al      0.0491 ± 0.0011  0.0         0.0490621    1.0         0.040414   0.0         0.040414     1.0\n   5 │ SRM-470 K411  SRM-470 K412  Fe      0.0774 ± 0.0016  0.112166   -0.0347457   -0.309771    0.030812   0.0457243  -0.0149123   -0.326135\n   6 │ SRM-470 K411  SRM-470 K412  Si      0.2120 ± 0.0009  0.253818   -0.0418356   -0.164825    0.167756   0.205741   -0.0379849   -0.184625","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"It is possible to do math using the + and * operators ith Material data items.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> m1, m2 = mat\"FeO2\", mat\"Al2O3\"\n(FeO2[O=0.3643,Fe=0.6357], Al2O3[O=0.4707,Al=0.5293])\n\njulia> m3 = 0.9*m1 + 0.1*m2\n0.9⋅FeO2+0.1⋅Al2O3[O=0.3749,Al=0.0529,Fe=0.5722]\n\njulia> isapprox(m3, mat\"0.9*FeO2+0.1*Al2O3\")\ntrue","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"There are various different ways to compute the mean atomic number.","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> z(m3)\n16.602113041602944\n\njulia> z(NeXLCore.NaiveZ, m3), z(NeXLCore.AtomicFraction, m3), z(NeXLCore.ElectronFraction, m3)\n(18.563572946574325, 13.449627818584222, 18.26890156121255)\n\njulia> z(NeXLCore.ElasticFraction, m3, 10.0e3), z(NeXLCore.Donovan2002, m3)\n(19.82831737587615, 16.602113041602944)","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"Material data items are used throughout the NeXL libraries.  For example:","category":"page"},{"location":"material/","page":"Materials","title":"Materials","text":"julia> mac(m3, n\"O K-L3\")\n2800.893061698401","category":"page"},{"location":"methods/#NeXLCore-Types,-Functions-and-Methods","page":"API: Structures and Methods","title":"NeXLCore Types, Functions and Methods","text":"","category":"section"},{"location":"methods/","page":"API: Structures and Methods","title":"API: Structures and Methods","text":"Modules = [NeXLCore]","category":"page"},{"location":"methods/#NeXLCore.GrayScale","page":"API: Structures and Methods","title":"NeXLCore.GrayScale","text":"An RGB gray-scale palette with entry 256 being yellow.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.Log3BandBright","page":"API: Structures and Methods","title":"NeXLCore.Log3BandBright","text":"Dave Bright's palette suited to use with log base-10 transformed data on the range [0.0, 1.0]. The 256ᵗʰ entry is yellow for an error condition.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.Log3BandColorblind","page":"API: Structures and Methods","title":"NeXLCore.Log3BandColorblind","text":"A colorblind friendly palette suited to use with log base-10 transformed data on the range [0.0, 1.0].\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.allsubshells","page":"API: Structures and Methods","title":"NeXLCore.allsubshells","text":"allsubshells\n\nA tuple containing all K, L, M, N and O sub-shells\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.alltransitions","page":"API: Structures and Methods","title":"NeXLCore.alltransitions","text":"alltransitions\n\nA complete list of all the transitions present in one or more elements.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.atomic_weight","page":"API: Structures and Methods","title":"NeXLCore.atomic_weight","text":"atomic_weight[elm::Element]::Union{NumberInterval, UncertainValue}\n\nAtomic weights from the 2020 tabulation at https://ciaaw.org/atomic-weights.htm.  Not all elements are represented because not all  elements have a nominal isotopic distribution.  Some, like Tc, don't exist in nature.  Others, like Pm, are instable.  Most atomic weights are given as UncertainValue instances while a few are NumberInterval instances.  For example, the atomic weight of Pb is highly variable and is thus given as a range.  (See the website for more details.)\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.a₀","page":"API: Structures and Methods","title":"NeXLCore.a₀","text":"a₀ : Bohr radius (in cm)\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.ksubshells","page":"API: Structures and Methods","title":"NeXLCore.ksubshells","text":"ksubshells\n\nAll K sub-shells ( K )\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.ktransitions","page":"API: Structures and Methods","title":"NeXLCore.ktransitions","text":"ktransitions\n\nA complete list of all the K-shell transitions.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.lsubshells","page":"API: Structures and Methods","title":"NeXLCore.lsubshells","text":"lsubshells\n\nAll L sub-shells ( L1, L2, L3 )\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.ltransitions","page":"API: Structures and Methods","title":"NeXLCore.ltransitions","text":"ltransitions\n\nA complete list of all the L-shell transitions.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.msubshells","page":"API: Structures and Methods","title":"NeXLCore.msubshells","text":"msubshells\n\nAll M sub-shells ( M1, M2,.., M5 )\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.mtransitions","page":"API: Structures and Methods","title":"NeXLCore.mtransitions","text":"mtransitions\n\nA complete list of all the M-shell transitions.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.mₑ","page":"API: Structures and Methods","title":"NeXLCore.mₑ","text":"mₑ : Electron rest mass (in eV)\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.nsubshells","page":"API: Structures and Methods","title":"NeXLCore.nsubshells","text":"nsubshells\n\nAll N sub-shells ( N1, N2,.., N7 ) ]\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.ntransitions","page":"API: Structures and Methods","title":"NeXLCore.ntransitions","text":"ntransitions\n\nA complete list of all the N-shell transitions.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.osubshells","page":"API: Structures and Methods","title":"NeXLCore.osubshells","text":"osubshells\n\nAll O sub-shells  ( O1, O2,.., O9 )\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.otransitions","page":"API: Structures and Methods","title":"NeXLCore.otransitions","text":"otransitions\n\nA complete list of all the O-shell transitions.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.transitionsbygroup","page":"API: Structures and Methods","title":"NeXLCore.transitionsbygroup","text":"transitionsbygroup\n\nA Dict{String,Tuple{Transition}} mapping group name into a list of transitions. Keys are \"K\",\"L\",\"M\",\"N\",\"O\" and \"Kα\", \"Ka\", \"Kβ\", \"Kb\" and \"Kother\".\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.transitionsbyshell","page":"API: Structures and Methods","title":"NeXLCore.transitionsbyshell","text":"transitionsbyshell\n\nA Dict{Char,Tuple{Transition}} mapping shell name into a list of transitions. Keys are Shell objects.\n\n\n\n\n\n","category":"constant"},{"location":"methods/#NeXLCore.AFtoNMF","page":"API: Structures and Methods","title":"NeXLCore.AFtoNMF","text":"AFtoNMF\n\nConverts atomic fraction into mass fraction - since the results in by necessity normalized, both the MassFractionLabel and NormMassFractionLabel versions are populated with identical information.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.AtomicFraction","page":"API: Structures and Methods","title":"NeXLCore.AtomicFraction","text":"Naive atomic fraction material Z model\n\nFor more details see Mean Z algorithm in J.J. Donovan, N.E. Pingitore, Microsc. Microanal. 2002 ; 8 , 429 (also see Microsc. Microanal. 27 (Suppl 1), 2021))\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.AtomicSubShell","page":"API: Structures and Methods","title":"NeXLCore.AtomicSubShell","text":"AtomicSubShell\n\nRepresents a specific ground-state occupied sub-shell in a specific element.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.BackscatterCoefficient","page":"API: Structures and Methods","title":"NeXLCore.BackscatterCoefficient","text":"η(::Type{<:BackscatterCoefficient}, elm::Element, e0::Real)\n\nAbstract type to represent backscatter coefficient algorithms.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Berger1982","page":"API: Structures and Methods","title":"NeXLCore.Berger1982","text":"@techreport{berger1982national,   title={National Bureau of Standards, Report NBSIR 82-2550},   author={Berger, MJ and Seltzer, SM},   journal={NBS, Washington, DC},   year={1982},   url={https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nbsir82-2550A.pdf} }\n\nAccording to B&S \"The continuous-slowing-down approximation, i.e., the use of a stopping power to describe the gradual energy loss along the electron track, ceases to be meaningful at energies below several hundred eV.\"\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Bethe","page":"API: Structures and Methods","title":"NeXLCore.Bethe","text":"The Bethe algorithm of kinetic energy loss by electrons.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.BetheEnergyLoss","page":"API: Structures and Methods","title":"NeXLCore.BetheEnergyLoss","text":"An abstract type to describe kinetic energy loss by electrons. \n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Bloch1933","page":"API: Structures and Methods","title":"NeXLCore.Bloch1933","text":"@article{von1933bremsvermogen,   title={Bremsverm{\"o}gen von Atomen mit mehreren Elektronen (Braking capabilities of multi-electron atoms)},   author={von Bloch, F},   journal={Z. Phys},   volume={81},   pages={363},   year={1933} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Brizuela1990","page":"API: Structures and Methods","title":"NeXLCore.Brizuela1990","text":"@article{brizuela1990study,   title={Study of mean excitation energy and K-shell effect for electron probe microanalysis},   author={Brizuela, Horacio and Riveros, Jos{'e} Alberto},   journal={X-Ray Spectrometry},   volume={19},   number={4},   pages={173–176},   year={1990},   publisher={Wiley Online Library} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Browning1991","page":"API: Structures and Methods","title":"NeXLCore.Browning1991","text":"Browning's scattering cross section\n\nAppl. Phys. Lett. 58, 2845 (1991); https://doi.org/10.1063/1.104754\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Browning1994","page":"API: Structures and Methods","title":"NeXLCore.Browning1994","text":"Browning's scattering cross section according to a draft 1994 article\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Castellano2004a","page":"API: Structures and Methods","title":"NeXLCore.Castellano2004a","text":"@article{castellano2004analytical,   title={Analytical model for the bremsstrahlung spectrum in the 0.25–20 keV photon energy range},   author={Castellano, Gustavo and Osan, Janos and Trincavelli, Jorge},   journal={Spectrochimica Acta Part B: Atomic Spectroscopy},   volume={59},   number={3},   pages={313–319},   year={2004},   publisher={Elsevier} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.CharXRay","page":"API: Structures and Methods","title":"NeXLCore.CharXRay","text":"CharXRay\n\nRepresents a specific known characteristic X-ray in a specific element.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.DefaultStageMapping","page":"API: Structures and Methods","title":"NeXLCore.DefaultStageMapping","text":"The DefaultStageMapping assumes a matching Cartesian coordinate system for both the stage and image.  It only assumes :X, :Y stage motion.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Donovan2002","page":"API: Structures and Methods","title":"NeXLCore.Donovan2002","text":"Donovan's recommended material Z model\n\nFor more details see Mean Z algorithm in J.J. Donovan, N.E. Pingitore, Microsc. Microanal. 2002 ; 8 , 429 (also see Microsc. Microanal. 27 (Suppl 1), 2021))\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ElasticFraction","page":"API: Structures and Methods","title":"NeXLCore.ElasticFraction","text":"Elastic fraction material Z model\n\nFor more details see Mean Z algorithm in J.J. Donovan, N.E. Pingitore, Microsc. Microanal. 2002 ; 8 , 429 (also see Microsc. Microanal. 27 (Suppl 1), 2021))\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ElasticScatteringCrossSection","page":"API: Structures and Methods","title":"NeXLCore.ElasticScatteringCrossSection","text":"Algorithms implementing the elastic scattering cross-section\n\nσₜ(::Type{ScreenedRutherford}, elm::Element, E::Float64)\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ElectronFraction","page":"API: Structures and Methods","title":"NeXLCore.ElectronFraction","text":"Electronic fraction material Z model\n\nFor more details see Mean Z algorithm in J.J. Donovan, N.E. Pingitore, Microsc. Microanal. 2002 ; 8 , 429 (also see Microsc. Microanal. 27 (Suppl 1), 2021))\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ElementByDifference","page":"API: Structures and Methods","title":"NeXLCore.ElementByDifference","text":"ElementByDifference\n\nComputes one element as the different between a sum of 1.0 mass fraction.  If the sum of the other element's mass fraction is already 1.0 or larger, returns zero.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ElementByStoichiometry","page":"API: Structures and Methods","title":"NeXLCore.ElementByStoichiometry","text":"ElementByStoichiometry\n\nComputes the mass-fraction of an element which is related by stoichiometric rules (valence-rules) to the other elements in the material.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Film","page":"API: Structures and Methods","title":"NeXLCore.Film","text":"A structure defining a thin film or layer of a Material.\n\nf = Film(pure(n\"C\"), 2.0e-7)  # 2 nm of nominal Calculated material(f) => pure C thickness(f) => 2.0e-7 massthickness(f) => 3.642e-7 g/cm²\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Jensen1937","page":"API: Structures and Methods","title":"NeXLCore.Jensen1937","text":"@article{jensen1937eigenschwingungen,   title={Eigenschwingungen eines fermi-gases und anwendung auf die blochsche bremsformel f{\"u}r schnelle teilchen},   author={Jensen, Hans},   journal={Zeitschrift f{\"u}r Physik},   volume={106},   number={9-10},   pages={620–632},   year={1937},   publisher={Springer} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.JoyLuo","page":"API: Structures and Methods","title":"NeXLCore.JoyLuo","text":"The Joy-Luo algorithm of Bethe kinetic energy loss by electrons. SCANNING Vol. 11, 176-180 (1989) \n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.KRatio","page":"API: Structures and Methods","title":"NeXLCore.KRatio","text":"KRatio(\n    xray::CharXRay,\n    unkProps::Dict{Symbol,<:Any},\n    stdProps::Dict{Symbol,<:Any},\n    standard::Material,\n    kratio::AbstractFloat,\n)\n\nThe k-ratio is the ratio of two similar intensity measurements - one on  a material of unknown composition and one on a standard with known  composition. Each measurement has properties like :BeamEnergy (req),  :TakeOffAngle (req), :Coating (opt) that characterize the measurement.   A minimal set of properties includes:\n\nProperties: (These Symbols are intentionally the same used in NeXLSpectrum)\n\n:BeamEnergy incident beam energy in eV\n:TakeOffAngle in radians\n:Coating A NeXLCore.Film object or Film[] detailing a conductive coating\n\nSome algorithms may require additional properties.\n\nk-ratios are associated with characteristic X-rays (CharXRay) from a single element. WDS k-ratios are typically associated with a single CharXRay while EDS measurements may be associated with many CharXRay that are similar in energy. k-ratios are always relative to another material.  Usually the composition of this Material is well-known.  However, when a k-ratio is restandardized, it is possible for the intermediate material to be less well-known.\n\nMethods:\n\n> element(kr)\n> xrays(kr)\n> standard(kr)\n> elms(KRatioBase[...])\n> NeXLUncertainties.value(kr::KRatio)\n> NeXLUncertainties.σ(kr::KRatio)\n> nonnegk(kr::KRatio)\n> Statistics.mean(krs::AbstractVector{KRatio})::UncertainValue\n> Base.getindex(krs::AbstractVector{KRatio}, cxr::CharXRay)\n> strip(krs::AbstractVector{KRatio}, els::Element...)::Vector{KRatio}\n> asa(::Type{DataFrame}, krs::AbstractVector{KRatio})::DataFrame\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.KRatioBase","page":"API: Structures and Methods","title":"NeXLCore.KRatioBase","text":"The members in common between KRatio and KRatios\n\n> element(kr)\n> xrays(kr)\n> standard(kr)\n> elms(KRatioBase[...])\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.KRatios","page":"API: Structures and Methods","title":"NeXLCore.KRatios","text":"KRatios represents the hyper-spectral equivalent of the KRatio type.  Each pixel in the KRatios object must be characterized by the same unknown and standard properties, the same X-ray lines and the other properties.\n\nMethods:\n\n> Base.getindex(krs::KRatios, idx::Int...)\n> Base.getindex(krs::KRatios, ci::CartesianIndex)\n> Base.size(krs::KRatios, [idx::Int])\n> Base.CartesianIndices(krs::KRatios)\n> normalizek(krs::AbstractVector{<:KRatios}; norm::Float32=1.0f)::Vector{KRatios}\n> normalizek(krs::AbstractVector{KRatio}; norm::Float32=1.0f)::Vector{KRatio}\n> brightest(krs::Union{KRatios, KRatio})\n> colorize(krs::AbstractVector{<:KRatios}, red::Element, green::Element, blue::Element, normalize=:All[|:Each])\n> colorize(krs::AbstractVector{<:KRatios}, elms::AbstractVector{Element}, normalize=:All)\n> Base.getindex(krs::AbstractVector{<:KRatios}, elm::Element) # Gray scale image\n> Base.getindex(krs::AbstractVector{<:KRatios}, red::Element, green::Element)  # Red-green image\n> Base.getindex(krs::AbstractVector{<:KRatios}, red::Element, green::Element, blue::Element) # RGB image\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Kramers1923","page":"API: Structures and Methods","title":"NeXLCore.Kramers1923","text":"@article{kramers1923,     author = { Kramers, H. A. },     title = {XCIII. On the theory of X-ray absorption and of the continuous X-ray spectrum},     journal = {The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science},     volume = {46},     number = {275},     pages = {836-871},     year  = {1923},     publisher = {Taylor & Francis},     doi = {10.1080/14786442308565244},     URL = { https://doi.org/10.1080/14786442308565244 },     eprint = { https://doi.org/10.1080/14786442308565244} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Lifshin1974","page":"API: Structures and Methods","title":"NeXLCore.Lifshin1974","text":"@InProceedings{ lifshin1974,     author={Lifshin, E.},     journal=\"Proceedings Ninth National Conference on Electron Probe Analysis, Ottowa, CA\",     year={1974},     volume={174},     number={3}, }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Liljequist1989","page":"API: Structures and Methods","title":"NeXLCore.Liljequist1989","text":"Liljequist's simple refinement of the basic ScreenedRutherford algorithm.\n\nJournal of Applied Physics, 65, 24-31 (1989) as corrected in J. Appl. Phys. 68 (7) 3061-3065 (1990)\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.LoveScott1978η","page":"API: Structures and Methods","title":"NeXLCore.LoveScott1978η","text":"@article{Love_1978, \tdoi = {10.1088/0022-3727/11/10/002}, \turl = {https://doi.org/10.1088%2F0022-3727%2F11%2F10%2F002}, \tyear = 1978, \tmonth = {jul}, \tpublisher = {{IOP} Publishing}, \tvolume = {11}, \tnumber = {10}, \tpages = {1369–1376}, \tauthor = {G Love and V D Scott}, \ttitle = {Evaluation of a new correction procedure for quantitative electron probe microanalysis}, \tjournal = {Journal of Physics D: Applied Physics}, \tabstract = {A new correction procedure for converting electron-probe microanalysis measurements into \ttrue weight concentration is proposed. It incorporates a new atomic number correction and an absorption \tcorrection based upon Bishop's model (1974). Unlike earlier treatments the model does not have to \trely upon any empirical optimisation of input parameters. The correction procedure has been tested by \tapplying it to a wide range of microanalysis data including light-element results, and it is shown to \tgive greater accuracy than the established methods.} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.MFtoNMF","page":"API: Structures and Methods","title":"NeXLCore.MFtoNMF","text":"MFtoNMF\n\nMass fraction to normalized mass fraction measurement model.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.MatStats","page":"API: Structures and Methods","title":"NeXLCore.MatStats","text":"MatStats\n\nComputes the mean atomic number (MeanZ) and mean atomic weight (MeanAz).\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Material","page":"API: Structures and Methods","title":"NeXLCore.Material","text":"Holds basic data about a material including name, composition in mass fraction and optional propreties.\n\nBy default, Material assumes nominal terrestrial atomic weights.  However, it is possible to assign custom atomic weights on a per element-basis for non-terrestrial materials.\n\nThe mass fraction and atomic weight are immutable but the Properties can be modified.\n\nMaterial(\n    name::AbstractString,\n    massfrac::AbstractDict{Element,U},\n    atomicweights::AbstractDict{Element,V} = Dict{Element,Float64}(),\n    properties::AbstractDict{Symbol,Any} = Dict{Symbol,Any}(),\n) where { U <: AbstractFloat, V <: AbstractFloat }\n\nProperties\n\n:Density # Density in g/cm³\n:Description # Human friendly\n:Pedigree #  Quality indicator for compositional data (\"SRM-XXX\", \"CRM-XXX\", \"NIST K-Glass\", \"Stoichiometry\", \"Wet-chemistry by ???\", \"WDS by ???\", \"???\")\n:Conductivity = :Insulator | :Semiconductor | :Conductor\n:OtherUserProperties # Other properties can be defined as needed\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Material-Tuple{Dict{String, Any}}","page":"API: Structures and Methods","title":"NeXLCore.Material","text":"Material(d::Dict)\n\nConstruct a Material from a Dict created by NeXLUncertainties.asa(Dict, mat::Material)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.MaterialFractionLabel","page":"API: Structures and Methods","title":"NeXLCore.MaterialFractionLabel","text":"MaterialFraction\n\nThis label represents the amount of a material constituent in material in a material defined as the mixture of other materials.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.MaterialLabel","page":"API: Structures and Methods","title":"NeXLCore.MaterialLabel","text":"MaterialLabel\n\nThe abstract type associated with Labels with material and element members.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Materials","page":"API: Structures and Methods","title":"NeXLCore.Materials","text":"Materials(\n    name::AbstractString,\n    els::AbstractArray{Element},\n    ::Type{U},\n    dims::Tuple;\n    atomicweights::AbstractDict{Element,V} = Dict{Element,Float64}(),\n    properties::AbstractDict{Symbol,Any} = Dict{Symbol,Any}(),\n) where {U<:AbstractFloat, V<:AbstractFloat}\n\nA type to represent the composition of multiple points as a complement to KRatios and HyperSpectrum. The data is stored in a much more memory efficient manner than Array{Material} would but can be accessed either by coordinate like mats[1,2] returning a Material or by element like mats[n\"Fe\"] returning an Array of mass fraction values.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NeXLBremsstrahlung","page":"API: Structures and Methods","title":"NeXLCore.NeXLBremsstrahlung","text":"An abstract structure that implements\n\nNeXLCore.bremsstrahlung(::Type{<:NeXLBremsstrahlung}, e::AbstractFloat, e0::AbstractFloat, elm::Element; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NeXLMeanIonizationPotential","page":"API: Structures and Methods","title":"NeXLCore.NeXLMeanIonizationPotential","text":"Algorithms that implement the mean ionization potential.  The mean ionization potential is the primary parameter in continuous slowing down models of electron energy loss in matter.  Electrons primarily lose energy through two mechanisms - 1) collision stopping power parameterized by J, the mean ionization potential; and 2) Bremsstrahlung production.  Two or three orders of magnitude more energy is lost to collisional loss so collisional loss dominates the process and losses due to Bremsstrahlung production are insignificant relative to the uncertainty in collisional loss.\n\nImplement this:\n\nJ(::Type{<:NeXLMeanIonizationPotential}, z)  # in eV\n\nAlso provided:\n\nJ(::Type{<:NeXLMeanIonizationPotential}, elm::Element)  # in eV\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NormalizeByShell","page":"API: Structures and Methods","title":"NeXLCore.NormalizeByShell","text":"NormalizeByShell normalizes the sum of all the weights associated with a shell to unity. Example: \n\nsum(cxr=>weight(NormalizeByShell, cxr), characteristic(n\"Fe\", ltransitions))==1.0\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NormalizeBySubShell","page":"API: Structures and Methods","title":"NeXLCore.NormalizeBySubShell","text":"NormalizeBySubShell normalizes the sum of all the weights associated with a sub-shell to unity.\n\nExample: \n\nsum(cxr=>weight(NormalizeBySubShell, cxr), characteristic(n\"Fe\", ltransitions))==1.0+1.0+1.0\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NormalizeRaw","page":"API: Structures and Methods","title":"NeXLCore.NormalizeRaw","text":"NormalizeRaw returns the raw transition probabilities - The probability of seeing the specified X-ray given one ionization of the specified shell.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.NormalizeToUnity","page":"API: Structures and Methods","title":"NeXLCore.NormalizeToUnity","text":"NormalizeToUnity normalizes intensities such that the most intense line in each shell is 1.0.\n\nExample:      weight(NormalizeToUnity, n\"Fe L3-M5\")==1.0     max(cxr=>weight(NormalizeBySubShell, cxr), characteristic(n\"Fe\", ltransitions))==1.0\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Particle","page":"API: Structures and Methods","title":"NeXLCore.Particle","text":"Particle represents a type that may be simulated using a transport Monte Carlo.  It must provide these methods:\n\nposition(el::Particle)::Position\nprevious(el::Particle)::Position\nenergy(el::Particle)::Float64\n\nThe position of the current and previous elastic scatter locations which are stored in that Particle type.\n\nT(prev::Position, curr::Position, energy::Energy) where {T <: Particle }\nT(el::T, 𝜆::Float64, 𝜃::Float64, 𝜑::Float64, ΔE::Float64) where {T <: Particle }\n\nTwo constructors: One to create a defined Particle and the other to create a new Particle based off another which is translated by λ at a scattering angle (θ, ϕ) which energy change of ΔE\n\ntransport(pc::T, mat::Material)::NTuple{4, Float64} where {T <: Particle }\n\nA function that generates the values of ( λ, θ, ϕ, ΔE) for the specified Particle in the specified Material.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Position","page":"API: Structures and Methods","title":"NeXLCore.Position","text":"Position : A point in 3-D.  Ultimately, derived from StaticArray.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Pouchou1991η","page":"API: Structures and Methods","title":"NeXLCore.Pouchou1991η","text":"The model for Pouchou's 1991 model (\"Green Book\") of the BackscatterCoefficient.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.RectangularShape","page":"API: Structures and Methods","title":"NeXLCore.RectangularShape","text":"The MonteCarlo uses the shapes defined in GeometryBasics basics as the foundation for its  sample construction mechanisms.  However, GeometryBasics basics does not provide all the  necessary methods.  Three additional methods are \n\nisinside(r::Shape, pos::Position)\n\nIs pos strictly inside r?\n\nintersection(r::Shape, pos0::Particle, pos1::Particle)::Float64\n\nReturn a number f which represent the fraction of the distance from pos0 to pos1 that first intersects the Shape r.  The intersection point will equal pos0 .+ f*(pos1 .- pos0). If f is between 0.0 and 1.0 then the intersection is on the interval between pos0 and pos1. If the ray from pos0 towards pos2 does not intersect r then this function returns Inf64.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Reed1975","page":"API: Structures and Methods","title":"NeXLCore.Reed1975","text":"@article{reed1975shape,   title={The shape of the continuous X-ray spectrum and background corrections for energy-dispersive electron microprobe analysis},   author={Reed, SJB},   journal={X-Ray Spectrometry},   volume={4},   number={1},   pages={14–17},   year={1975},   publisher={Wiley Online Library} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Region","page":"API: Structures and Methods","title":"NeXLCore.Region","text":"Region\n\nA Region combines a geometric primative and a Material (with :Density property) and may fully contain zero or more child Regions.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Reimer1998","page":"API: Structures and Methods","title":"NeXLCore.Reimer1998","text":"The model for Reimer's model of the BackscatterCoefficient.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.ScreenedRutherfordType","page":"API: Structures and Methods","title":"NeXLCore.ScreenedRutherfordType","text":"Basic screened Rutherford algorithm where V(r) = (-Ze²/r)exp(-r/R) where R=a₀Z⁻¹/³ is solved using the first Born approximation.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Shell","page":"API: Structures and Methods","title":"NeXLCore.Shell","text":"Shell\n\nRepresents the K, L, M, N etc atomic shell\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Small1987","page":"API: Structures and Methods","title":"NeXLCore.Small1987","text":"@article{small1987modeling,   title={Modeling of the bremsstrahlung radiation produced in pure-element targets by 10–40 keV electrons},   author={Small, John A and Leigh, Stefan D and Newbury, Dale E and Myklebust, Robert L},   journal={Journal of applied physics},   volume={61},   number={2},   pages={459–469},   year={1987},   publisher={American Institute of Physics} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Smith1975","page":"API: Structures and Methods","title":"NeXLCore.Smith1975","text":"@article{ smithgoldtomlinson1975     title=\"The atomic number dependence of the X‐ray continuum intensity and the practical calculation of background in energy dispersive electron microprobe analysis\",     author = {Smith, D. G. W.  and Gold, C. M. and Tomlinson, D. A.},     journal={X-ray Spectrometry},     volume={4},     pages={149-156},     year={1975},     doi={10.1002/xrs.1300040311}, }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Springer1967","page":"API: Structures and Methods","title":"NeXLCore.Springer1967","text":"@article{springer1967electron,   title={Electron Transport in Amorphous Materials. I},   author={Springer, Bernard},   journal={Physical Review},   volume={154},   number={3},   pages={614},   year={1967},   publisher={APS} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Sternheimer1964","page":"API: Structures and Methods","title":"NeXLCore.Sternheimer1964","text":"Cited personal communication in @article{berger196410,   title={10. Tables of energy-losses and ranges of electrons and positrons},   author={Berger, M and Seltzer, S},   journal={Studies in penetration of charged particles in matter},   number={39},   pages={205},   year={1964} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.SubShell","page":"API: Structures and Methods","title":"NeXLCore.SubShell","text":"SubShell\n\nRepresents one of the various subshells in an atom.  (See AtomicSubShell to combine the element with a SubShell.) Member data items are index::Int where 1=>K, 2=>L1, ..., 36=>P11. Construct using SubShell(name::AbstractString) where name = \"K\", \"L1\"...,\"P11\"\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Tomlin1963","page":"API: Structures and Methods","title":"NeXLCore.Tomlin1963","text":"@article{Tomlin_1963, \tdoi = {10.1088/0370-1328/82/3/118}, \turl = {https://doi.org/10.1088%2F0370-1328%2F82%2F3%2F118}, \tyear = 1963, \tmonth = {sep}, \tpublisher = {{IOP} Publishing}, \tvolume = {82}, \tnumber = {3}, \tpages = {465–466}, \tauthor = {S G Tomlin}, \ttitle = {The Back-scattering of Electrons from Solids}, \tjournal = {Proceedings of the Physical Society}, \tabstract = {Archard's diffusion model of electron back-scattering is discussed on the basis of a \tresult obtained by Tomlin and Metchnik in 1963 in their treatment of x-ray emission intensities. \tThe resulting simple formula for the back-scattering coefficient is in reasonably good agreement \twith measured values.} }\n\nThe implementation adapted to not return negative numbers for z<5.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Transition","page":"API: Structures and Methods","title":"NeXLCore.Transition","text":"Transition\n\nRepresents an inner and outer shell that describe an X-ray transition. Only transitions for which one or more element has a characteristic x-ray are supported according to the default line weight database (weight > 0 for one or more Z). This structure does not contain the Element information necessary to specify a characteristic X-ray.\n\nData items:\n\ninnerShell::SubShell\nouterShell::SubShell\n\nExample:\n\ntr1 = Transition(n\"K1\",n\"L3\")\ntr2   = Transition(SubShell(1),SubShell(4))\n@assert tr1==tr2\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Trincavelli1997","page":"API: Structures and Methods","title":"NeXLCore.Trincavelli1997","text":"@article{trincavelli1998model,   title={Model for the bremsstrahlung spectrum in EPMA. Application to standardless quantification},   author={Trincavelli, Jorge and Castellano, Gustavo and Riveros, J Alberto},   journal={X-Ray Spectrometry: An International Journal},   volume={27},   number={2},   pages={81–86},   year={1998},   publisher={Wiley Online Library} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.WeightNormalization","page":"API: Structures and Methods","title":"NeXLCore.WeightNormalization","text":"The abstract type WeightNormalization is the base type for structs identifying the various different useful ways in which line weight (relaxation) data can be represented.\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Wilson1941","page":"API: Structures and Methods","title":"NeXLCore.Wilson1941","text":"@article{wilson1941range,   title={Range and ionization measurements on high speed protons},   author={Wilson, Robert R},   journal={Physical Review},   volume={60},   number={11},   pages={749},   year={1941},   publisher={APS} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.XRay","page":"API: Structures and Methods","title":"NeXLCore.XRay","text":"An abstract type for X-rays like CharXRay and Continuum\n\n\n\n\n\n","category":"type"},{"location":"methods/#NeXLCore.Zeller1973","page":"API: Structures and Methods","title":"NeXLCore.Zeller1973","text":"@article{coulon1973determination,   title={D{'e}termination th{'e}oretique du facteur de r{'e}trodiffusion en microanalyse par {'e}mission X},   author={Coulon, J and Zeller, C},   journal={CR Acad Sci Paris},   volume={276},   pages={215–218},   year={1973} }\n\n\n\n\n\n","category":"type"},{"location":"methods/#Base.convert-Tuple{Type{Material}, AbstractString}","page":"API: Structures and Methods","title":"Base.convert","text":"Base.convert(::Type{Material}, str::AbstractString)\n\nConvert a DTSA-II style string into a material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.delete!-Tuple{SQLite.DB, Type{Material}, AbstractString}","page":"API: Structures and Methods","title":"Base.delete!","text":"Base.delete!(db::SQLite.DB, ::Type{Material}, matname::AbstractString)\n\nDelete the named Material from the database.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.findall-Tuple{SQLite.DB, Type{Material}, AbstractString}","page":"API: Structures and Methods","title":"Base.findall","text":"Base.findall(db::SQLite.DB, ::Type{Material}, like::AbstractString)::Vector{String}\n\nReturns the names of all Materials in the database which match the like string.\n\nlike uses SQL like syntax where % and _ have special meanings. Searches are case-insenstive.\n\n'%' matches zero or more characters \n'_' matches one character\n\nUsing the RUFF database:\n\nfindall(db, Material, \"Al%\") matches all 37 materials starting with the letters 'a' then 'l' (case-insenstive).\nfindall(db, Material, \"Al%ite\") matches all materials starting with the letters 'a' then 'l' and ending with 'ite'.\nfindall(db, Material, \"Al__rsite\") matches \"Alforsite\" and \"Alpersite\" while findall(db, Material, \"Al%rsite\") matches these two plus Alarsite.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.findall-Tuple{SQLite.DB, Type{Material}, Vararg{Pair{Element, <:Tuple{var\"#s81\", var\"#s79\"} where {var\"#s81\"<:Real, var\"#s79\"<:Real}}}}","page":"API: Structures and Methods","title":"Base.findall","text":"Base.findall(db::SQLite.DB, ::Type{Material}, prs::Pair{Element, <:Tuple{<:Real,<:Real}}...)::Vector{<:Material}\nBase.findall(db::SQLite.DB, ::Type{Material}, filt::Dict{Element, <:Tuple{<:Real,<:Real}})::Vector{<:Material}\nBase.findall(db::SQLite.DB, mat::Material, tol::Float64)::Vector{<:Material}\n\nReturns all the Materials in the database that have mass fractions for the specified elements within a range. The first two versions take a collection of Element, Tuple pairs that specify the range of mass fractions for each element.\n\nExamples:\n\njulia> findall(db, Material, Dict(n\"Bi\"=>(0.1,0.5), n\"Cu\"=>(0.2,0.3)))\n3-element Vector{Material{UncertainValue, Float64}}:\n Favreauite[Bi=0.1488,Se=0.2249,Cu=0.2715,Pb=0.1475,O=0.2051,H=0.0022]\n Miharaite[Bi=0.2275,Cu=0.2767,S=0.2094,Fe=0.0608,Pb=0.2256]\n Mrázekite[Bi=0.4641,Cu=0.2117,P=0.0688,O=0.2487,H=0.0067]\n\njulia> findall(db, mat\"NaAlSi3O8\", 0.01)\n4-element Vector{Material{UncertainValue, Float64}}:\n Albite[Al=0.1029,Na=0.0877,Si=0.3213,O=0.4881]\n Kumdykolite[Al=0.1029,Na=0.0877,Si=0.3213,O=0.4881]\n Lingunite[Al=0.1029,Na=0.0877,Si=0.3213,O=0.4881]\n Monalbite[Al=0.1029,Na=0.0877,Si=0.3213,O=0.4881]\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.findfirst-Tuple{AbstractVector{<:NeXLCore.KRatioBase}, CharXRay}","page":"API: Structures and Methods","title":"Base.findfirst","text":"Base.findfirst(krs::AbstractVector{<:KRatioBase}, cxr::CharXRay)\n\nFind the first KRatio or KRatios in which the .xrays field contains the cxr::CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.haskey-Tuple{Material, Element}","page":"API: Structures and Methods","title":"Base.haskey","text":"haskey(mat::Material, elm::Element)\nhaskey(mat::Material, z::Int)\n\nDoes this material contain this element?\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.haskey-Tuple{Material, Symbol}","page":"API: Structures and Methods","title":"Base.haskey","text":"haskey(mat::Material, sym::Symbol)\n\nDoes this material have this property defined?\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.haskey-Tuple{SQLite.DB, Type{Material}, AbstractString}","page":"API: Structures and Methods","title":"Base.haskey","text":"Base.haskey(db::SQLite.DB, ::Type{Material}, matname::AbstractString)::Bool\n\nIs a Material named matname in the database?\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.isapprox-Tuple{Material, Material}","page":"API: Structures and Methods","title":"Base.isapprox","text":"Base.isapprox(mat1::Material, mat2::Material; atol = 1.0e-4)\n\nAre these Material(s) equivalent to within atol?\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.keys-Tuple{Material}","page":"API: Structures and Methods","title":"Base.keys","text":"Base.keys(mat::Material)\n\nReturn an interator over the elements in the Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.parse-Tuple{Type{AtomicSubShell}, AbstractString}","page":"API: Structures and Methods","title":"Base.parse","text":"Base.parse(::Type{SubShell}, name::AbstractString)\nsubshell(name::AbstractString)\n\nParse an SubShell from a string of the form \"K\", \"L1\", \"L2\", ...\n\nBase.parse(::Type{AtomicSubShell}, str::AbstractString)::AtomicSubShell\natomicsubshell(str::AbstractString)::AtomicSubShell\n\nParse an AtomicSubShell from a string of the form \"Fe K\" or \"U M5\".\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.parse-Tuple{Type{Transition}, AbstractString}","page":"API: Structures and Methods","title":"Base.parse","text":"transition(str::AbstractString)::Transition\n\nConstructs a Transition structure from a string representation of the form \"K-L3\" or \"L3-M5\".  Asserts if the transition is not a known transition.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.rand","page":"API: Structures and Methods","title":"Base.rand","text":"Base.rand(::Type{Material}, zs::AbstractUnitRange{Int}=1:20)::Material\n\nGenerate a randomize material.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Base.rand-Tuple{Type{<:ScreenedRutherfordType}, Element, Float64}","page":"API: Structures and Methods","title":"Base.rand","text":"Base.rand(::Type{<:ScreenedRutherfordType}, elm::Element, E::Float64)::Float64\n\nDraw an angle distributed according to the angular dependence of the differential screened Rutherford cross-section.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.rand-Tuple{Type{<:ScreenedRutherfordType}, Material, Float64}","page":"API: Structures and Methods","title":"Base.rand","text":"Base.rand(ty::Type{<:ScreenedRutherfordType}, mat::Material, E::Float64)::NTuple{3, Float64}\n\nReturns a randomly selected elastic scattering event description.  The result is ( λ, θ, ϕ ) where  λ is a randomized mean free path for the first scattering event.  θ is a randomized scattering  angle on (0.0, π) and ϕ is a randomized azimuthal angle on [0, 2π).\n\nThe algorithm considers scattering by any element in the material and picks the shortest randomized  path.  This implementation depends on two facts: 1) We are looking for the first scattering event  so we consider all the elements and pick the one with the shortest path. 2) The process is memoryless.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.range","page":"API: Structures and Methods","title":"Base.range","text":"range(::Type{BetheEnergyLoss}, mat::Material, e0::Float64, inclDensity = true)\n\nCalculates the electron range using numeric quadrature of a BetheEnergyLoss algorithm.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Base.range-2","page":"API: Structures and Methods","title":"Base.range","text":"range(::Type{Kanaya1972}, mat::Material, e0::Float64, inclDensity = true)\n\nCalculates the Kanaya-Okayama electron range. Kanaya K, Okayama S (1972) Penetration and energy-loss theory of electrons in solid targets. J Appl Phys 5:43\n\n\n\n\n\n","category":"function"},{"location":"methods/#Base.read-Tuple{SQLite.DB, Type{Material}, Int64}","page":"API: Structures and Methods","title":"Base.read","text":"Base.read(db::SQLite.DB, ::Type{Material}, pkey::Int)::Material\nBase.read(db::SQLite.DB, ::Type{Material}, matname::AbstractString)::Material\n\nRead a Material from the database by index or by name.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.similar-Tuple{Material{UncertainValue}, Integer}","page":"API: Structures and Methods","title":"Base.similar","text":"Base.similar(mat::Material{UncertainValue, <:AbstractFloat}, n::Integer)::Vector{Material{UncertainValue,Float64}}\n\nGenerate n Materials similar to mat using the uncertainties in mat as  your guide of dispersion.  The mass-fractions of mat must be defined as UncertainValues.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.strip-Tuple{AbstractVector{KRatio}, Vararg{Element}}","page":"API: Structures and Methods","title":"Base.strip","text":"strip(krs::AbstractVector{KRatio}, els::Element...)::Vector{KRatio}\n\nCreates a new Vector{KRatio} containing all the KRatio objects in krs except those associated with the specified elements.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.sum-Tuple{Dict{Material, <:AbstractFloat}}","page":"API: Structures and Methods","title":"Base.sum","text":"Base.sum(\n  data::Dict{Material, <:AbstractFloat};\n  name::Union{AbstractString,Missing} = missing,\n  properties::Dict{Symbol,Any} = Dict{Symbol,Any}(),\n  density::Union{Missing,AbstractFloat} = missing,\n  description::Union{Missing,AbstractString} = missing,\n  pedigree::Union{Missing,AbstractString} = missing,\n  conductivity::Union{Missing,Symbol} = missing, # :Conductor, :Semiconductor, :Insulator\n\n)::Material\n\nSum together proportions of various Material structs.  The dictionary defines the material and the mass fraction of that material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.sum-Tuple{Material, Material}","page":"API: Structures and Methods","title":"Base.sum","text":"Base.sum(\n    mat1::Material,\n    mat2::Material;\n    name::Union{AbstractString,Missing} = missing,\n    properties::Dict{Symbol,Any} = Dict{Symbol,Any}(),\n    density::Union{Missing,AbstractFloat} = missing,\n    description::Union{Missing,AbstractString} = missing,\n    pedigree::Union{Missing,AbstractString} = missing,\n    conductivity::Union{Missing,Symbol} = missing, # :Conductor, :Semiconductor, :Insulator\n)::Material\n\nConstruct a Material that represents the mass-fraction sum of mat1 and mat2. This function  is often used along with Base.:(k::AbstractFloat, mat::Material)::Material to construct mixtures of compounds.  Ultimately, expressions like `mat\"0.5Al2O3+0.5MgO\"or equivalently0.5mat\"Al2O3\"+0.5*mat\"MgO\"are computed usingsum(...)`.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.write-Tuple{SQLite.DB, Type{Material}, Material}","page":"API: Structures and Methods","title":"Base.write","text":"Base.write(db::SQLite.DB, ::Type{Material}, mat::Material)::Int\n\nAdd a Material to the SQLite database.  Will not overwrite a previously define definition. To replace a definition, first delete!(db, Material, matname). Returns the database key associated with the Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Gadfly.plot","page":"API: Structures and Methods","title":"Gadfly.plot","text":"Gadfly.plot(sss::AbstractVector{SubShell}, mode=:EdgeEnergy|:FluorescenceYield; palette=NeXLPalette)\n\nPlot the edge energies/fluorescence yields associated with the specified vector of SubShell objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Gadfly.plot-Tuple{AbstractVector{Transition}}","page":"API: Structures and Methods","title":"Gadfly.plot","text":"Gadfly.plot(transitions::AbstractVector{Transition}; mode=:Energy|:Weight, palette=NeXLPalette)\n\nPlot either the :Energy or :Weight associated with the specified transitions over the range of supported elements.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Gadfly.plot-Tuple{Type{<:NeXLAlgorithm}, AbstractVector}","page":"API: Structures and Methods","title":"Gadfly.plot","text":"compareMACs(elm::Element; palette=NeXLPalette)\n\nPlot a comparison of the FFAST and Heinrich MAC tabulations for the specified Element or Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Gadfly.plot-Tuple{Type{<:NeXLAlgorithm}, Union{Element, Material}}","page":"API: Structures and Methods","title":"Gadfly.plot","text":"plot(alg::Type{<:NeXLAlgorithm}, elm::Union{Element,Material}; palette = NeXLPalette, xmax=20.0e3)\n\nPlot a MAC tabulations for the specified Element or Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.Ekₑ-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.Ekₑ","text":"Electron kinetic energy in eV for v in cm/s.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.J-Tuple{Type{<:NeXLMeanIonizationPotential}, Material}","page":"API: Structures and Methods","title":"NeXLCore.J","text":"J(ty::Type{<:NeXLMeanIonizationPotential}, mat::Material)\n\nComputes the mean ionization potential for a material based on the formula in PaP1992 (Green Book)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.LinearScale-Tuple{AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.LinearScale","text":"Tranforms numbers on the range [0.0, 1.0] onto a linear gray scale palette. NaNs are plotted in yellow.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.Log3Band-Tuple{AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.Log3Band","text":"Tranforms numbers on the range [1.0e-3, 1.0] into David Bright's Log3-band palette using a log base-10 transform. NaNs are plotted in yellow.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.Log3BandC-Tuple{AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.Log3BandC","text":"Tranforms numbers on the range [1.0e-3, 1.0] into a colorblind friendly palette using a log base-10 transform. NaNs are plotted in yellow.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.LogScale-Tuple{AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.LogScale","text":"Tranforms numbers on the range [1.0e-3, 1.0] onto a Log base-10 gray scale palette. NaNs are plotted in yellow.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.Rₐ-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.Rₐ","text":"Rₐ(elm::Element)\n\nClassic formula for the atomic screening radius in cm\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore._mp_level1","page":"API: Structures and Methods","title":"NeXLCore._mp_level1","text":"Parses \"XXX+YYY+ZZZ\" into add(\"XXX\", \"YYY\", \"ZZZ\")\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore._mp_level2-Tuple{AbstractString, AbstractString, Dict{Element, Float64}, Function}","page":"API: Structures and Methods","title":"NeXLCore._mp_level2","text":"Parses \"#EXPR\" or \"#*EXPR\" into times(#, \"EXPR\")\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore._mp_level3-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore._mp_level3","text":"Parses \"something⋅#H2O\" or \"something⋅#OH\" or \"something.PO4\" or \"something\",  replace \"X¹⁺\", \"X²⁺\" and \"X³⁺\" etc with plain old \"X\"\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore._mp_level4-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore._mp_level4","text":"Match parenthesis like \"pre(inner)n\"\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore._mp_level5-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore._mp_level5","text":"Evaluate simple expressions like Al2O3 or SiO2 etc.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.a-Tuple{Element, Material}","page":"API: Structures and Methods","title":"NeXLCore.a","text":"a(elm::Element, mat::Material)\n\nGet the atomic weight for the specified Element in the specified Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.a-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.a","text":"a(elm::Element)\n\nReturn the mean atomic weight of the Element in amu\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.a-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.a","text":"a(mat::Material)\n\nComputes the mean atomic weight for a material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.allmaterials-Tuple{Region}","page":"API: Structures and Methods","title":"NeXLCore.allmaterials","text":"allmaterials(reg::Region)\n\nGenerates a list of all the unique materials in a sample Region. \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.analyticaltotal-Union{Tuple{Material{U, V}}, Tuple{V}, Tuple{U}} where {U<:AbstractFloat, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.analyticaltotal","text":"analyticaltotal(mat::Material)\n\nReturn the sum of the positive mass fractions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.asnormalized-Union{Tuple{Material{U, V}}, Tuple{V}, Tuple{U}, Tuple{Material{U, V}, Any}} where {U<:AbstractFloat, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.asnormalized","text":"asnormalized(mat::Material, n=1.0)::Material\n\nConvert the Material to a normalized Material form.  Negative mass fractions are set to zero before normalization.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.asoxide-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.asoxide","text":"asoxide(elm::Element, valences = NeXLCore.defaultValences)\n\nCompute the oxidized form of the specified element using the valences provided in val.  By default, val = NeXLCore.defaultValences, a typical set of valences.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.asoxide-Tuple{Vararg{Pair{Element, <:AbstractFloat}}}","page":"API: Structures and Methods","title":"NeXLCore.asoxide","text":"asoxide(elms::Pair{Element, <:AbstractFloat}...; valences = NeXLCore.defaultValences, atomicweights::Dict{Element,<:AbstractFloat} = Dict{Element,Float64}())\nasoxide(elms::Dict{Element, <:AbstractFloat}...; valences = NeXLCore.defaultValences, atomicweights::Dict{Element,<:AbstractFloat} = Dict{Element,Float64}())\n\nProviding the mass-fraction of the consituent elements in elms, compute the corresponding amounts of the oxide forms of the elements.  This can be used to answer the question: If I measure this amount of these elements, what mass fraction of the oxide-forms of each element does this correspond to?  The example below demonstrates that Albite is 68.74% SiO₂ by mass. By default, val = NeXLCore.valences, a typical set of valences.  See also obystoichiometry(...)\n\nExample:\n\njulia> mat\"NaAlSi3O8\"\n  NaAlSi3O8[Al=0.1029,Na=0.0877,Si=0.3213,O=0.4881]\njulia> asoxide(n\"Al\"=>0.1029, n\"Na\"=>0.0877, n\"Si\"=>0.3213)\n  Dict{Material, Float64} with 3 entries:\n  SiO₂[O=0.5326,Si=0.4674]  => 0.687366\n  Al₂O₃[Al=0.5293,O=0.4707] => 0.194424\n  Na₂O[Na=0.7419,O=0.2581]  => 0.118216\njulia> sum(asoxide(n\"Al\"=>0.1029, n\"Na\"=>0.0877, n\"Si\"=>0.3213), name=\"Albite\")\n  Albite[Al=0.1029,Na=0.0877,O=0.4881,Si=0.3213]\njulia> asoxide(filter(kv->kv[1]!=n\"O\", massfraction(mat\"NaAlSi3O8\")))\n  Dict{Material, Float64} with 3 entries:\n    SiO₂[O=0.5326,Si=0.4674]  => 0.687401\n    Al₂O₃[Al=0.5293,O=0.4707] => 0.194418\n    Na₂O[Na=0.7419,O=0.2581]  => 0.118181\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atomicfraction-Union{Tuple{Material{U, V}}, Tuple{V}, Tuple{U}} where {U<:AbstractFloat, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.atomicfraction","text":"atomicfraction(mat::Material{U,V})::Dict{Element,U}\n\nReturn the composition in atomic fraction representation.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atomicfraction-Union{Tuple{V}, Tuple{U}, Tuple{AbstractString, Vararg{Pair{Element, U}}}} where {U<:Real, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.atomicfraction","text":"atomicfraction(\n    name::String,\n    atomfracs::Union{Dict{Element,Float64},Pair{Element,Float64}...};\n    properties::properties::Dict{Symbol, Any},\n    atomicweights::Dict{Element,Float64},\n    density::Union{Missing, AbstractFloat}=missing,\n    description::Union{Missing, AbstractString}=missing,\n    pedigree::Union{Missing, AbstractString}=missing,\n    conductivity::Union{Missing, Symbol}=missing, # :Conductor, :Semiconductor, :Insulator\n\n) # density, description, pedigree, conductivity\n\nBuild a Material from atomic fractions (or stoichiometries).\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atomicsubshell-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.atomicsubshell","text":"atomicsubshell(str::AbstractString)::AtomicSubShell\n\nParse an AtomicSubShell from a string of the form \"Fe K\" or \"U M5\".\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atomicsubshell-Tuple{Element, SubShell}","page":"API: Structures and Methods","title":"NeXLCore.atomicsubshell","text":"atomicsubshell(elm::Element, ss::SubShell)::AtomicSubShell\n\nConstruct an AtomicSubShell from from an Element and a SubShell.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atomicsubshells-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.atomicsubshells","text":" atomicsubshells(elm::Element, maxE=1.0e6)::Vector{AtomicSubShell}\n\nReturns a Vector containing all AtomicSubShell structs associated with the  specified element with less than the specified energy (in eV).\n\nExample:\n\njulia> atomicsubshells(n\"Fe\",1.0e3)\n8-element Array{AtomicSubShell,1}:\n Fe M3\n Fe L3\n Fe M5\n Fe L1\n Fe L2\n Fe M1\n Fe M4\n Fe M2\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atoms_per_cm³-Tuple{Material, Element}","page":"API: Structures and Methods","title":"NeXLCore.atoms_per_cm³","text":"atoms_per_cm³(mat::Material, elm::Element) =\n\nNumber of atoms per cm³ of the specified Element in the specified Material.  The Material must define the :Density property.\n\natoms_per_cm³(mat::Material)\n\nTotal number of atoms per cm³ for all elements in mat. \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.atoms_per_g-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.atoms_per_g","text":"atoms_per_g(elm::Element)\natoms_per_g(mat::Material)\natoms_per_g(mat::Material, elm::Element)\n\nCompute the number of atoms of elm in 1 gram of mat.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.bremsstrahlung-Tuple{Type{Kramers1923}, AbstractFloat, AbstractFloat, Element}","page":"API: Structures and Methods","title":"NeXLCore.bremsstrahlung","text":"bremsstrahlung(::Type{<:NeXLBremsstrahlung}, e::AbstractFloat, e0::AbstractFloat, elm::Element)\n\nCalcualtes the Bremsstrahlung (continuum) at an energy e for an incident electron of e0 in the element elm.\n\nThe supported models include:  Kramers1923, Lifshin1974, Reed1975, Smith1975, Small1987, Trincavelli1997,  Castellano2004a, Castellano2004b\n\nEvaluating the models I find that Castellano2004a, Trincavelli1997 work well with the Riveros1993 matrix correction algorithm and the AP33Tabulation window.  Smith1975 works surprisigly well with the CitZAF matrix correction model. Other old models based on Si(Li) data tend to not do too well at lower energies.  This shouldn't surprise anyone as these models were often based on data from Be window detectors.  Castellano2004a and Trincavelli1997 were designed around the Riveros1993 matrix correction model and don't perform well using CitZAF.\n\nMy current recommendation is either Castellano2004a or Riveros1993.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.brightest-Tuple{Element, Any}","page":"API: Structures and Methods","title":"NeXLCore.brightest","text":"brightest(elm::Element, shell)\n\nReturn the brightest transition among the shell of transitions for the specified element.  (group=\"K\"|\"Ka\"|\"Kb\"|\"L\" etc)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.brightest-Tuple{KRatios}","page":"API: Structures and Methods","title":"NeXLCore.brightest","text":"brightest(krs::Union{KRatios, KRatio})\n\nReturns a new KRatios (referencing same basic data as krs) but with a single CharXRay in the lines field.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.buildMaterialTables-Tuple{SQLite.DB}","page":"API: Structures and Methods","title":"NeXLCore.buildMaterialTables","text":"buildMaterialTables(db::SQLite.DB)\n\nBuild the necessary tables in a SQLite database to hold Materials.  Safe! Only creates the tables if they don't exist.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.bulk-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.bulk","text":"bulk(mat::Material)\n\nConstruct a bulk homogeneous sample at the origin.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.capacity-Tuple{SubShell}","page":"API: Structures and Methods","title":"NeXLCore.capacity","text":"capacity(ss::SubShell)\n\nElectron capacity for the specified sub-shell.  This is the total number of electrons that the sub-shell can hold, not the actual number a specific ground-state element may have in that sub-shell.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.chamber","page":"API: Structures and Methods","title":"NeXLCore.chamber","text":"chamber(dim=100.0)\n\nConstruct a high vacuum chamber to act as the outer-most Region.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.charactericXRayAvailable-Tuple{Int64, Int64, Int64}","page":"API: Structures and Methods","title":"NeXLCore.charactericXRayAvailable","text":"characteristicXRayAvailable(z::Int, inner::Int, outer::Int)::Float64\n\nIs the weight associated with this transition greater than zero?\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.characteristic-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.characteristic","text":"characteristic(str::AbstractString)::CharXRay\n\nCreate a CharXRay structure from a string like \"Fe K-L3\" or \"U L3-M5\".\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.childmost_region-Tuple{Region, AbstractArray{Float64}}","page":"API: Structures and Methods","title":"NeXLCore.childmost_region","text":"childmost_region(reg::Region, pos::Position)::Region\n\nFind the inner-most Region within reg containing the point pos.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.coated_particle","page":"API: Structures and Methods","title":"NeXLCore.coated_particle","text":"coated_particle(mat::Material, radius::Float64, coating::Material, thickness::Float64, substrate::Union{Nothing,Material} = nothing)\n\nConstruct a coated particle on an optional substrate.\n\nThis model is a good example of how more complex models are constructed.  Use dump(..) to display the structure.  You'll notice that the chamber serves as the root Region.  The coating and substrate are in the chamber (children of the chamber Region).  The particle is a child of the coating Region because the particle is fully enclosed by the coating.  An electron inside of the coating will enter the particle and leave the coating as soon as it enters the volume representing the particle.  The electron only appears to be within the child-most region at any point in space.  So a typical trajectory might start in the chamber, enter the coating, traverse the thickness of the coating and then enter the particle.  It may eventually leave the particle and reenter the coating, exit the coating and reenter the chamber and finally come to rest in the substrate.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.colorize","page":"API: Structures and Methods","title":"NeXLCore.colorize","text":"colorize(krs::AbstractVector{<:KRatios}, red::Element, green::Element, blue::Element, normalize=:All[|:Each])\ncolorize(krs::AbstractVector{<:KRatios}, elms::AbstractVector{Element}, normalize=:All)\n\nCreate RGB colorized images from up to three Elements.  The elements are normalized relative to all KRatios in krs. The resulting images are scaled by the factor scale to allow visualization of trace elements.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.colorize-Tuple{Region}","page":"API: Structures and Methods","title":"NeXLCore.colorize","text":"colorize(reg::Region)::Dict{Material, Color}\n\nGenerate a Dict{Material, Color} for all the Materials in the specified Region. Designed for distinctive but not necessarily attractive colors.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.compare-Tuple{Material, Material}","page":"API: Structures and Methods","title":"NeXLCore.compare","text":"compare(unk::Material, known::Material)::DataFrame\n\nCompare two compositions in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.compareMACs-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.compareMACs","text":"compareMACs(elm::Element; palette=NeXLPalette)\n\nPlot a comparison of the FFAST and Heinrich MAC tabulations for the specified Element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.compositionlibrary-Tuple{}","page":"API: Structures and Methods","title":"NeXLCore.compositionlibrary","text":"compositionlibrary()::Dict{String, Material}\n\nLoad the internal compositon library.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.comptonAngular-Tuple{Any, Any}","page":"API: Structures and Methods","title":"NeXLCore.comptonAngular","text":"comptonAngular(θ, E)\n\nThe angular distribution function of Compton scattered X-rays of incident energy E scattered to an angle θ.\n\nBased on the Klein-Nishina formula for Compton scattering. It has been normalized so that the integral over dΩ = 2π⋅sin(θ) dθ equals one.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.comptonDifferential-Tuple{Any, Any}","page":"API: Structures and Methods","title":"NeXLCore.comptonDifferential","text":"comptonDifferential(θ, E)\n\nDifferential crosssection dσ/dΩ = dσ/(sin(θ) dθ dϕ) for Compton scattering in cm².\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.comptonEnergy-Tuple{Any, Any}","page":"API: Structures and Methods","title":"NeXLCore.comptonEnergy","text":"comptonEnergy(θ, E)\n\nThe energy of the scattered X-ray resulting from a Compton event with an incident X-ray energy of E eV at a scatter angle of θ radians.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.comptonShift-Tuple{Any, Any}","page":"API: Structures and Methods","title":"NeXLCore.comptonShift","text":"comptonShift(θ, E)\n\nThe fractional energy of the scattered X-ray resulting from a Compton event with an incident X-ray energy of E eV at a scatter angle of θ radians.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.compute_tilt-Tuple{Vector, Vector, Vector}","page":"API: Structures and Methods","title":"NeXLCore.compute_tilt","text":"compute_tilt(v1::Vector, v2::Vector, v3::Vector)\n\nCompute the tilt and angle of tilt of the sample where v1, v2 and v3 are three points forming a triangle with each focused on the surface of the sample.  Assumes a right-handed  coordinate system which may/may not match your stage.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.configuration-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.configuration","text":"configuration(elm::Element)\n\nThe configuration of the shell occupancy in a specific ground-state element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.dEds","page":"API: Structures and Methods","title":"NeXLCore.dEds","text":"dEds(::Type{<:BetheEnergyLoss}, e::Float64, elm::Element, ρ::Float64; mip::Type{<:NeXLMeanIonizationPotential}=Berger1982)\ndEds(::Type{<:BetheEnergyLoss}, e::Float64, mat::Material, inclDensity=true; mip::Type{<:NeXLMeanIonizationPotential}=Berger1982)\n\nCalculate the loss per unit path length for an electron in the specified element and density.  The results in energy loss in eV/Å.  Implemented by Type{Bethe} and Type{JoyLuo}.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.delete-Tuple{Material, Element}","page":"API: Structures and Methods","title":"NeXLCore.delete","text":"delete(mat::Material, elm::Element)::Material\ndelete(mat::Material, elm::AbstractVector{Element})::Material\n\nConstructs a new Material from mat with elm removed.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.density-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.density","text":"density(elm::Element)\n\nReturn the nominal density for the element in g/cm³.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.density-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.density","text":"density(mat::Material)\n\nReturn the density in g/cm³ (Might be 'missing')\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.description-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.description","text":"description(mat::Materail)\n\nThe :Description property.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.eachelement","page":"API: Structures and Methods","title":"NeXLCore.eachelement","text":"eachelement()\n\nReturn the range of atomic numbers for which there is a complete set of energy, weight, MAC, ... data\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.eachsubshell-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.eachsubshell","text":"eachsubshell(elm::Element)\n\nIterates over each sub-shell that is present in an element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.edgeenergy-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.edgeenergy","text":"edgeenergy(cxr::CharXRay)\n\nReturns the energy associated with the inner shell of this characteristic X-ray (eV).\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.elasticfraction-Tuple{Element, Material, Float64}","page":"API: Structures and Methods","title":"NeXLCore.elasticfraction","text":"elasticfraction(elm::Element, mat::Material, e0::Float64)::Float64\n\nComputes the fraction of the total scattering cross-section associated with elm in mat at beam energy e0.\n\n@incollection{armstrong1991quantitative,   title={Quantitative elemental analysis of individual microparticles with electron beam instruments},   author={Armstrong, John T},   booktitle={Electron probe quantitation},   pages={261–315},   year={1991},   publisher={Springer} }\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.electronfraction-Tuple{Element, Material}","page":"API: Structures and Methods","title":"NeXLCore.electronfraction","text":"electronfraction(elm::Element, mat::Material)::Float64\n\nThe electron fraction as defined in:\n\n@article{donovan2003compositional,   title={Compositional averaging of backscatter intensities in compounds},   author={Donovan, John J and Pingitore, Nicholas E and Westphal, Andrew},   journal={Microscopy and Microanalysis},   volume={9},   number={3},   pages={202–215},   year={2003},   publisher={Cambridge University Press} }\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.electrons_per_second-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.electrons_per_second","text":"Electrons per second per nA of current.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.element-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.element","text":"element(str::AbstractString)\n\nParses a string to determine if the string represents an Element by atomic number, symbol or name.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.element-Tuple{AtomicSubShell}","page":"API: Structures and Methods","title":"NeXLCore.element","text":" element(ass::AtomicSubShell)\n\nThe Element associated with the specified sub-shell.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.element-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.element","text":"element(cxr::CharXRay)\n\nReturn the element for this CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.element-Tuple{Integer}","page":"API: Structures and Methods","title":"NeXLCore.element","text":"element(z::Int)::PeriodicTable.Element\n\nCovert an atomic number into a PeriodicTable.Element\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.elms-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.elms","text":"elms(mat::Material)\n\nThe elements with mass fraction ≠ 0.0 in mat.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.elms-Tuple{Vector{<:NeXLCore.KRatioBase}}","page":"API: Structures and Methods","title":"NeXLCore.elms","text":"elms(krs::Vector{KRatio})::Set{Element}\n\nReturn a set containing the elements present in krs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.energy-Tuple{AtomicSubShell, Type{DefaultAlgorithm}}","page":"API: Structures and Methods","title":"NeXLCore.energy","text":" energy(ass::AtomicSubShell)\n energy(elm::Element, ss::SubShell)\n\nThe edge energy in eV for the specified AtomicSubShell\n\nExample:\n\njulia> energy(n\"Fe L3\")\n708.0999999999999\njulia> energy(n\"Fe\", n\"L3\")\n708.0999999999999\n\nenergy(elm::Element, tr::Transition)::Float64\nenergy(cxr::CharXRay)\n\nThe characteristic X-ray energy for the specified element / transition or characteristic X-ray.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.exists-Tuple{SubShell, SubShell}","page":"API: Structures and Methods","title":"NeXLCore.exists","text":"exists(inner::SubShell, outer::SubShell)::Bool\n\nDoes a transition exist in our database for this pair of shells?\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fluorescenceyield-Tuple{AtomicSubShell, Type{Burhop1965}}","page":"API: Structures and Methods","title":"NeXLCore.fluorescenceyield","text":"fluorescenceyield(ass::AtomicSubShell, ::Type{Burhop1965})\n\nAn approximate expression for the K-shell fluorescence yield due to E.H.S Burhop, J. Phys. Radium, 16, 625 (1965). Seems reasonable.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fluorescenceyield-Tuple{AtomicSubShell, Type{Kahoul2012}}","page":"API: Structures and Methods","title":"NeXLCore.fluorescenceyield","text":"Kahoul 2012 expression for the K-shell fluorescence yield\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fluorescenceyield-Tuple{AtomicSubShell, Type{Sogut2002}}","page":"API: Structures and Methods","title":"NeXLCore.fluorescenceyield","text":"fluorescenceyield(ass::AtomicSubShell, ::Type{Sogut2002})\n\nAn alternative for M-line yields.  Not alway reasonable.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fluorescenceyield-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.fluorescenceyield","text":"Represents the fractional number of X-rays emitted following the ionization of the sub-shell ionized via the characteristic X-ray z inner-outer.  Due to cascades, inner does not necessarily equal ionized. The ionized subshell may transition to a valency in inner via a combination of Auger, fluorescence or Koster-Kronig transitions.  The various different forms make assumptions about the relationship between ionized and inner, and about outer.\n\nfluorescenceyield(ass::AtomicSubShell)::Float64\n\nThe fraction of relaxations from the specified shell that relax via any radiative transition. (inner==ionized)\n\nfluorescenceyield(cxr::CharXRay)\n\nThe fraction of ionizations of inner(cxr) that relax via the one path cxr. ionized==inner && outer(cxr)\n\nfluorescenceyield(ash::AtomicSubShell, cxr::CharXRay)::Float64\n\nThe fractional number of cxr X-rays emitted (on average) for each ionization of ash.  This makes no  assumptions about inner, outer and ionized\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fractionaluncertainty-Tuple{Type{NeXLCore.MonatomicGas}, Integer, Any}","page":"API: Structures and Methods","title":"NeXLCore.fractionaluncertainty","text":"fractionaluncertainty(::Type{MonatomicGas}, z::Integer, energy)\n\nDetermines from the element and energy, the approximate range of fractional uncertainties to associate with the total and photoelectric components of the mass attenuation coefficients for monatomic gas samples. Based on this table.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.fractionaluncertainty-Tuple{Type{NeXLCore.SolidLiquid}, Integer, Any}","page":"API: Structures and Methods","title":"NeXLCore.fractionaluncertainty","text":"fractionaluncertainty(::Type{SolidLiquid}, z::Integer, energy)\n\nDetermines from the element and energy, the approximate range of fractional uncertainties to associate with the total and photoelectric components of the mass attenuation coefficients for solids and liquids. Based on this table.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.gun-Union{Tuple{T}, Tuple{Type{T}, Float64}, Tuple{Type{T}, Float64, Float64}, Tuple{Type{T}, Float64, Float64, GeometryBasics.Point3{Float64}}, Tuple{Type{T}, Float64, Float64, GeometryBasics.Point3{Float64}, Any}} where T<:Particle","page":"API: Structures and Methods","title":"NeXLCore.gun","text":"gun(::Type{T}, energy::Float64, width::Float64=1.0e-7, initial::Position=Position(0.0,0.0,-10.0), direction=Position(0.0,0.0,1.0)::T where {T <: Particle}\n\nA helper to construct the initial Particle in a randomized Gaussian distribution.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.has-Tuple{Element, SubShell}","page":"API: Structures and Methods","title":"NeXLCore.has","text":"has(elm::Element, s::SubShell) =\n\nIs the specified sub-shell occupied by one or more electrons in a ground-state atom of the specified element?\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.has-Tuple{Element, Transition}","page":"API: Structures and Methods","title":"NeXLCore.has","text":"has(elm::Element, tr::Transition)::Bool\n\nIs the specified Transition available for the specified element?\n\nExample:\n\n@assert has(n\"Fe L3-M5)\n@assert !has(n\"Fe N7-O9)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.hasminrequired-Tuple{Type, Dict{Symbol, Any}}","page":"API: Structures and Methods","title":"NeXLCore.hasminrequired","text":"hasminrequired(ty::Type, item::Union{Spectrum,Dict{Symbol,Any}})\n\nDoes this spectrum have the minimal set of required properties?\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.image2stage-Tuple{Type{DefaultStageMapping}, Dict, Dict, Float64}","page":"API: Structures and Methods","title":"NeXLCore.image2stage","text":"image2stage(::Type{DefaultStageMapping}, stage_coord::Dict{Symbol,Any}, img_coord::Dict{Symbol,Any}, theta::Float64)\n\nGiven the stage coordinate at the center of the image stage_coord, the pixel coordinate of interest (in the same units as stage_coord) and the image rotation theta, compute the stage coordinate that would bring the pixel into the center of the image. \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.inner-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.inner","text":"inner(cxr::CharXRay)\n\nReturn the inner AtomicSubShell associated with the specified CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.ionizationcrosssection-Tuple{Int64, Int64, AbstractFloat, Type{Bote2009}}","page":"API: Structures and Methods","title":"NeXLCore.ionizationcrosssection","text":"ionizationcrosssection(z::Int, shell::Int, energy::AbstractFloat, ::Type{Bote2009})\nionizationcrosssection(ass::AtomicSubShell, energy::AbstractFloat, ty::Type{<:NeXLAlgorithm}=Bote2009)\n\nComputes the absolute ionization crosssection (in cm²/e⁻) for the specified AtomicSubShell and electon energy (in eV).\n\nExample:\n\njulia> (/)(map(e->NeXLCore.ionizationcrosssection(n\"Fe K\",e),[10.0e3,20.0e3])...)\n0.5672910174711278\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.ispure-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.ispure","text":"ispure(mat::Material)\n\nDoes mat represent a single element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.isstandard-Tuple{KRatio}","page":"API: Structures and Methods","title":"NeXLCore.isstandard","text":"isstandard(kr::KRatio)::Boolean\n\nDoes this k-ratio have all the necessary basic properties required for use as a standard  (:TakeOffAngle, and :BeamEnergy for both stdProps and unkProps and :Composition for  unkProps.)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.j-Tuple{SubShell}","page":"API: Structures and Methods","title":"NeXLCore.j","text":" j(ss::SubShell)\n\nTotal angular momentum quantum number\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.jumpratio-Tuple{AtomicSubShell, Type{Poehn1985}}","page":"API: Structures and Methods","title":"NeXLCore.jumpratio","text":"jumpratio(ashell::AtomicSubShell, ::Type{Poehn1985})\n\nAn implement of jump ratios attributed to\n\nPoehn, Wernisch, Hanke (1985) X-ray Spectrom 14(3):120, 1985\n\nCompares reasonably over available range.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.klinewidths-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.klinewidths","text":"klinewidths(elm::Element)\n\nLinewidth of the K shell according to Bambynek'1974 errata to Bambynek 1972. Shown to be reliable for Z>36 or so.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.kₑ-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.kₑ","text":"kₑ(E::Float64)\n\nElectron wavenumber (inverse wavelength) in rad⋅cm⁻¹.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.l-Tuple{SubShell}","page":"API: Structures and Methods","title":"NeXLCore.l","text":"l(ss::SubShell)\n\nOrbital angular momentum quantum number\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.labeled-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.labeled","text":"labeled(mat::Material)\n\nTransform the mass fraction representation of a material into a Dict{MassFractionLabel,AbstractFloat}\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.listcustommacs-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.listcustommacs","text":"listcustommacs(cxr::CharXRay)\n\nGenerated a list of available custom MACs for cxr in various elements.\n\nlistcustommacs(elms::Set{Element}|AbstractVector{Element}|Element...|Material)\n\nGenerate a list of available custom MACS for elements and X-rays both produced and absorbed by these elements.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.loadcustommac!-Tuple{Element, CharXRay, AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.loadcustommac!","text":"loadcustommac!(elm::Element, cxr::CharXRay, source::AbstractString)\n\nLoad the custom mass absorption coefficient associated with the specified CharXRay in the Element from the source. Use listcustommacs(cxr) to explore available MACs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.loadcustommacs!-Tuple{AbstractString, AbstractArray{Element}}","page":"API: Structures and Methods","title":"NeXLCore.loadcustommacs!","text":"loadcustommacs!(source::AbstractString, elms::AbstractArray{Element})\nloadcustommacs!(source::AbstractString, elm::Element)\n\nLoad custom macs from the database associated with the specified source.\n\nSources include \"Henke1974\", \"Henke1982\", \"Bastin1989\", \"Henke1993\", \"Bastin1997\", \"Ruste1979\", \"Kohlhaas1970\", \"Weisweiler1975\",  \"Bastin1990\", \"Bastin1988\", \"Poml2020\", \"Ruste1975\", \"Henke1982\", \"Farthing1990\", \"Sabbatucci2016\"\n\nUse listcustommacs(cxr) to explore available MACs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.loadlegend-Tuple{String}","page":"API: Structures and Methods","title":"NeXLCore.loadlegend","text":"Loads a legend image from the package source directory. Some legends include \"LinearScale.png\", \"LogScale.png\", \"Log3BandBright.png\", \"Log3BandColorblind.png\".\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.loadsmithsoniandata-Tuple{}","page":"API: Structures and Methods","title":"NeXLCore.loadsmithsoniandata","text":"loadsmithsoniandata(; clean=false)\n\nLoad compositional data associated with the Smithsonian Microbeam Standards data set as a DataFrame. Setting clean=true will replace \"<0.XXX\" with 0.0, replace \"missing\" with 0.0 and parse string values as Float64.   The data source is https://naturalhistory.si.edu/research/mineral-sciences/collections-overview/reference-materials/smithsonian-microbeam-standards\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.mac","page":"API: Structures and Methods","title":"NeXLCore.mac","text":"mac(mat::Material, xray::Union{Float64,CharXRay}, alg::Type{<:NeXLAlgorithm}=DefaultAlgorithm)::Float64\n\nCompute the material MAC using the standard mass fraction weighted formula.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.mac-Tuple{Element, Float64, Type{DTSA}}","page":"API: Structures and Methods","title":"NeXLCore.mac","text":"mac(zz::Int, ev::Float64, ::Type{DTSA})::Float64\n\nCalculate the elemental MAC using Heinrich's IXCOM 11 formula as implemented by Myklebust in DTSA.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.mac-Tuple{Element, Float64, Type{DefaultAlgorithm}}","page":"API: Structures and Methods","title":"NeXLCore.mac","text":"mac(elm::Element, energy::Float64)::Float64\nmac(elm::Element, cxr::CharXRay)::Float64\n\nThe mass absorption coefficient for an X-ray of the specified energy (eV) or characteristic X-ray line in the specified element.  In cm²/g.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.macU","page":"API: Structures and Methods","title":"NeXLCore.macU","text":"macU(elm::Element, energy::Float64)\nmacU(elm::Element, cxr::CharXRay)::UncertainValue\n\nThe mass absorption coefficient (with uncertainty estimate) for an X-ray of the specified energy (eV)  or characteristix X-ray line in the specified element.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.massfraction-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.massfraction","text":"massfraction(mat::Material)::Dict{Element, AbstractFloat}\n\nThe mass fraction as a Dict{Element, AbstractFloat}\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.massthickness-Tuple{Film}","page":"API: Structures and Methods","title":"NeXLCore.massthickness","text":"massthickness(flm::Film)\n\nThe mass-thickness of the film in g/cm².\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.matches-Tuple{Union{KRatio, KRatios}, KRatio}","page":"API: Structures and Methods","title":"NeXLCore.matches","text":"matches(kr::Union{KRatio, KRatios}, std::Standard)::Bool\n\nIs std a match for kr? (Same element, same standard, same lines, same :BeamEnergy & :TakeOffAngle )\n\nstdProps[:Composition] items match if 1) are Materials with almost the same mass-fractions; 2) they are equivalent AbstractString values.  The later is for \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.material-Union{Tuple{U}, Tuple{AbstractString, Dict{Element, U}}} where U<:AbstractFloat","page":"API: Structures and Methods","title":"NeXLCore.material","text":"material(\n    name::AbstractString,\n    massfrac::Dict{Element,U};\n    properties::Union{Missing,Dict{Symbol,Any}} = missing,\n    atomicweights::Union{Missing, Dict{Element,Float64}} = missing,\n    density::Union{Missing,AbstractFloat} = missing,\n    description::Union{Missing,AbstractString} = missing,\n    pedigree::Union{Missing,AbstractString} = missing,\n    conductivity::Union{Missing,Symbol} = missing, # :Conductor, :Semiconductor, :Insulator\n)\nmaterial(\n    name::AbstractString,\n    massfrac::Dict{Element,<:AbstractFloat};\n    properties::Dict{Symbol,Any}=Dict{Symbol,Any)(),\n    atomicweights::Dict{Element, <:AbstractFloat}=Dict{Element,Float64}(),\n    density::Union{Missing, AbstractFloat}=missing,\n    description::Union{Missing, AbstractString}=missing,\n    pedigree::Union{Missing, AbstractString}=missing,\n    conductivity::Union{Missing, Symbol}=missing, # :Conductor, :Semiconductor, :Insulator\n)\n\nConstuct a material from mass fraction pairs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.materiallabels-Tuple{Type{<:MaterialLabel}, String, Union{LabeledValues, UncertainValues}}","page":"API: Structures and Methods","title":"NeXLCore.materiallabels","text":"materiallabels(ty::Type{<:MaterialLabel}, material::String, uvs::Union{LabeledValues,UncertainValues})\n\nUseful for extracting the MaterialLabel[s] associated with a single material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.mf2comp-Tuple{String, UncertainValues}","page":"API: Structures and Methods","title":"NeXLCore.mf2comp","text":"mf2comp(material::String, mfs::UncertainValues)::UncertainValues\nmf2comp(mat::Material)::UncertainValues\n\nConverts a material composition expressed in the mfs UncertainValues struct into a handful of common representations including normalized mass fraction, atomic fraction, mean Z and mean atomic number.  The second form converts a Material into UncertainValues form.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.minproperties-Tuple{Type{Any}}","page":"API: Structures and Methods","title":"NeXLCore.minproperties","text":"minrequired(::Type{XXX})\n\nReturns the minimum required properties.  Other classes implement this to check whether a Spectrum or Dict has all the necessary properties for the specified algorithm or data structure.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.mixture-Tuple{String, Vararg{Pair{Material, UncertainValue}}}","page":"API: Structures and Methods","title":"NeXLCore.mixture","text":"mixture(mat::String, mix::Pair{UncertainValues,UncertainValue}...)::UncertainValues\nmixture(mat::String, mix::Pair{Material, UncertainValue}...)::UncertainValues\n\nConverts a mixture of materials into a material. In the first case, the input materials are in UncertainValues representation. In the second case, the Material instances are converted to the UncertainValues representation. In each case, the first item in the Pair represents a material and the second the mass fraction of that material in the mixture.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.name","page":"API: Structures and Methods","title":"NeXLCore.name","text":"name(cxrs::AbstractVector{CharXRay}, byfamily=false)\n\nAn abbeviated name for a collection of CharXRay.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.name-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.name","text":"name(elm::Element)\n\nReturn the name like \"Hydrogen\", \"Helium\",... for the Element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.name-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.name","text":"name(mat::Material)\n\nReturn a human friendly short name for the Material.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.nonneg-Union{Tuple{V}, Tuple{U}, Tuple{Material{U, V}, Element}} where {U<:AbstractFloat, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.nonneg","text":"nonneg(mat::Material{U,V}, elm::Element)::U where {U<:AbstractFloat,V<:AbstractFloat}\nnonneg(mat::Material{UncertainValue,V}, elm::Element)::Float64 where {V<:AbstractFloat}\nnonneg(mat::Material)::Material\n\nReturns the mass fraction of elm::Element truncated to be non-negative.  Negative values are returned as 0.0. Positive values are returned as is.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.normalized-Union{Tuple{V}, Tuple{Material{UncertainValue, V}, Element}, Tuple{Material{UncertainValue, V}, Element, Any}} where V<:AbstractFloat","page":"API: Structures and Methods","title":"NeXLCore.normalized","text":"normalized(mat::Material{U,V}, elm::Element, n=1.0)\n\nReturns the mass fraction of 'elm::Element' such that the returned value is non-negative and the sum of all values is unity.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.normalizedmassfraction-Union{Tuple{Material{U, V}}, Tuple{V}, Tuple{U}, Tuple{Material{U, V}, Any}} where {U<:AbstractFloat, V<:AbstractFloat}","page":"API: Structures and Methods","title":"NeXLCore.normalizedmassfraction","text":"normalizedmassfraction(mat::Material)::Dict{Element, AbstractFloat}\n\nReturn the normalized mass fraction as a Dict{Element, AbstractFloat}.  Negative values are set to zero.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.normalizek-Tuple{AbstractVector{<:KRatios}}","page":"API: Structures and Methods","title":"NeXLCore.normalizek","text":"normalizek(krs::AbstractVector{<:KRatios}; norm::Float32=1.0f)::Vector{KRatios}\nnormalizek(krs::AbstractVector{KRatio}; norm::Float32=1.0f)::Vector{KRatio}\n\nComputes the pixel-by-pixel normalized k-ratio for each point in the KRatios data array. norm specifies normalization constants other than 1.0.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.obystoichiometry-Tuple{Dict{Element, <:AbstractFloat}}","page":"API: Structures and Methods","title":"NeXLCore.obystoichiometry","text":"obystoichiometry(elms::Pair{Element, <:AbstractFloat}..., valences = NeXLCore.defaultValences)\nobystoichiometry(elms::Dict{Element, <:AbstractFloat}; valences = NeXLCore.defaultValences)\n\nCompute O-by-stoichiometry from the provided mass fractions of elements.\n\nExample:\n\nobystoichiometry(n\"Mg\"=>0.1099, n\"Al\"=>0.0443, n\"Si\"=>0.1941, n\"Ca\"=>0.1034, n\"Fe\"=>0.0756)\n0.39582340257233467\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.outer-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.outer","text":"outer(cxr::CharXRay)\n\nReturn the outer AtomicSubShell associated with the specified CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.parsedsmithsoniandata-Tuple{}","page":"API: Structures and Methods","title":"NeXLCore.parsedsmithsoniandata","text":"parsedsmithsoniandata()::Dict{String, Material}\n\nConverts the data from loadsmithsoniandata() into Material representation.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.parsex-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.parsex","text":"parsex(str::AbstractString)::Union{Element, SubShell, AtomicSubShell, Transition, CharXRay}\n\nImplements compile time parsing of strings to produce Element, SubShell, AtomicSubShell, Transition or CharXRay objects. The only oddity is that to get SubShell(\"K\") you must enter n\"K1\" to differentiate the sub-shell from potassium. parsex(...) provides the implementation for n\"...\".\n\nExamples:\n\nn\"Fe\" => Element \nn\"L3\" => SubShell\nn\"K\" => Element\nn\"K1\" => SubShell (\"K\" would be the element potassium)\nn\"Fe K\" => AtomicSubShell (\"K\" not ambiguous here...)\nn\"Fe L3\" => AtomicSubShell\nn\"L3-M5\" => Transition\nn\"Fe L3-M5\" => CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.particle","page":"API: Structures and Methods","title":"NeXLCore.particle","text":"particle(mat::Material, radius::Float64, substrate::Union{Nothing,Material} = nothing)\n\nConstruct a spherical particle at the origin with an optional bulk substrate.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.pathlength-Tuple{Particle}","page":"API: Structures and Methods","title":"NeXLCore.pathlength","text":"pathlength(el::Particle)\n\nLength of the line segment represented by el.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.pedigree-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.pedigree","text":"pedigree(mat::Material)\n\nThe :Pedigree property.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.pure-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.pure","text":" material(str::String, density::Float64)\n nargs...\npure(elm::Element)\n\nConstruct a Material to represent a pure element.\n\nExample:\n\n> pure(n\"Fe\")\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.random_point_inside-Tuple{Any}","page":"API: Structures and Methods","title":"NeXLCore.random_point_inside","text":"random_point_inside(shape)\n\nGenerate a randomized point that is guaranteed to be in the interior of the shape.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.relativeionizationcrosssection-Tuple{AtomicSubShell, AbstractFloat, Type{NeXLCore.Pouchou1991}}","page":"API: Structures and Methods","title":"NeXLCore.relativeionizationcrosssection","text":"relativeionizationcrosssection(z::Int, ss::Int, ev::AbstractFloat)\nrelativeionizationcrosssection(ass::AtomicSubShell, ev::AbstractFloat, ::Type{Pouchou1991})\n\nAn approximate expression based of Pouchou and Pouchoir's 1991 (Green Book) expression for the ionization crosssection plus an additional factor for sub-shell occupancy.\n\nExample:\n\n> (/)(map(e->NeXLCore.relativeionizationcrosssection(n\"Fe K\",e),[10.0e3,20.0e3])...)\n0.5982578301818324\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.rename-Tuple{Material, AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.rename","text":"rename(mat::Material, newname::AbstractString)\n\nCreates a replica of mat but with a new name.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.requiredbutmissing-Tuple{Type, Dict{Symbol, Any}}","page":"API: Structures and Methods","title":"NeXLCore.requiredbutmissing","text":"requiredbutmissing(ty::Type, item::Union{Spectrum,Dict{Symbol,Any}})\n\nList any required but missing properties.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.resetmac!-Tuple{Element, CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.resetmac!","text":"ressetmac!(elm::Element, cxr::CharXRay)\n\nRestore the default mass absorption coefficient for the specified element and characteristic X-ray.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.sample-Tuple{Region}","page":"API: Structures and Methods","title":"NeXLCore.sample","text":"sample(ch::Region)\n\nExtracts the sample portion from within the chamber.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.setmac!-Tuple{Element, CharXRay, Float64}","page":"API: Structures and Methods","title":"NeXLCore.setmac!","text":"setmac!(elm::Element, cxr::CharXRay, mac::Float64)\n\nSpecify a custom mass absorption coefficient (MAC) for the specified X-ray in the specified element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.shell-Tuple{AtomicSubShell}","page":"API: Structures and Methods","title":"NeXLCore.shell","text":"shell(ass::AtomicSubShell)\n\nExample:\n\njulia> shell(n\"Fe L3\")\nShell(L)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.shell-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.shell","text":"shell(cxr::CharXRay)\n\nReturn the shell, Shell(1), Shell(2), ... associated with the inner shell.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.shell-Tuple{SubShell}","page":"API: Structures and Methods","title":"NeXLCore.shell","text":"shell(sh::SubShell)\n\nReturns the appropriate Shell object.\n\nExample:\n\njulia> shell(n\"M5\")\nShell[M]\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.shell-Tuple{Transition}","page":"API: Structures and Methods","title":"NeXLCore.shell","text":"shell(tr::Transition)\n\nReturn the shell (Shell(1), Shell(2),...) associated with the transition's inner shell.\n\nExample:\n\n@assert shell(n\"K-L3\")==Shell(1)\n@assert shell(n\"M5-N7\")==Shell(3)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.splitbyshell-Tuple{Any}","page":"API: Structures and Methods","title":"NeXLCore.splitbyshell","text":"splitbyshell(cxrs)\n\nSplits a collection of CharXRay into a dictionary where the key is the inner AtomicSubShell and the values are a vector of CharXRay for that inner shell.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.stage2image-Tuple{Type{DefaultStageMapping}, Dict, Dict, Float64}","page":"API: Structures and Methods","title":"NeXLCore.stage2image","text":"stage2image(::Type{DefaultStageMapping}, stage_coord::Dict{Symbol,Any}, centered_coord::Dict{Symbol,Any}, theta::Float64)\n\nstage2image(...) is the inverse function of image2stage(...).  Given the stage coordinate of the center of the image  stage_coord and the stage coordinate that would center the pixel of interest centered_coord, compute the pixel coordinate corresponding to the centered_coordinate when the stage is at stage_coord.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.standardize-Tuple{KRatio, KRatio}","page":"API: Structures and Methods","title":"NeXLCore.standardize","text":"standardize(kr::KRatio, std::KRatio)::KRatio\nstandardize(kr::KRatios, std::KRatio)::KRatios\nstandardize(kratios::Union{AbstractVector{KRatio},AbstractVector{<:KRatios}}, stds::AbstractVector{KRatio})\n\nIf the std::KRatio is a suitable match for kr then kr is restandardized using std.  Otherwise, the original KRatio or KRatios is returned.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.subshell-Tuple{AbstractString}","page":"API: Structures and Methods","title":"NeXLCore.subshell","text":"subshell(name::AbstractString)::SubShell\n\nReturns a SubShell structure from a string of the form \"K\", \"L1\", ...., \"O11\"\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.symbol-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.symbol","text":"symbol(elm::Element)\n\nReturn the symbol like \"H\", \"He\", \"Li\", .... for the Element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.take_step-Union{Tuple{T}, Tuple{T, Region, Vararg{Float64, 4}}, Tuple{T, Region, Vararg{Float64, 5}}} where T<:Particle","page":"API: Structures and Methods","title":"NeXLCore.take_step","text":"take_step(p::T, reg::Region, 𝜆::Float64, 𝜃::Float64, 𝜑::Float64)::Tuple{T, Region, Bool} where { T<: Particle}\n\nReturns a Tuple containing a new Particle and the child-most Region in which the new Particle is found based on a scatter event consisting a translation of up to 𝜆 mean-free path along a new direction given relative to the current direction of p via the scatter angles 𝜃 and 𝜑.\n\nReturns the updated Particle reflecting the last trajectory step and the Region for the next step.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.thin_film-Tuple{Vararg{Pair{Material, Float64}}}","page":"API: Structures and Methods","title":"NeXLCore.thin_film","text":"thin_film(prs::Pair{Material, Float64}...; substrate::Union{Nothing,Material} = nothing)\n\nConstruct sample consisting of one or more thin films on an optional bulk substrate.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.trajectory-Union{Tuple{T}, Tuple{Function, T, Region, Function, Function}} where T<:Particle","page":"API: Structures and Methods","title":"NeXLCore.trajectory","text":"trajectory(eval::Function, p::T, reg::Region, scf::Function=transport; minE::Float64=50.0) where {T <: Particle} trajectory(eval::Function, p::T, reg::Region, scf::Function, terminate::Function) where { T <: Particle }\n\nRun a single particle trajectory from p to minE or until the particle exits reg.\n\neval(part::T, region::Region) a function evaluated at each scattering point\np defines the initial position, direction and energy of the particle (often created with gun(T, ...))\nreg The outer-most region for the trajectory (usually created with chamber())\nscf A function from (<:Particle, Material) -> ( λ, θ, ϕ, ΔE ) that implements the transport dynamics\nminE Stopping criterion\nterminate a function taking T and Region that returns false except on the last step (like terminate = (pc,r)->pc.energy < 50.0)\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.transition-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.transition","text":"transition(cxr::CharXRay)\n\nReturn the Transition structure associated with the specified CharXRay.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.transition-Tuple{SubShell, SubShell}","page":"API: Structures and Methods","title":"NeXLCore.transition","text":"transition(inner::SubShell, outer::SubShell)::Transition\n\nReturn a Transition structure from an inner and outer shell. This function tests to ensure that the Transition is a known transition.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.transmission","page":"API: Structures and Methods","title":"NeXLCore.transmission","text":"transmission(flm::Film, xrayE::AbstractFloat, θ::AbstractFloat = π/2, alg::Type{<:NeXLAlgorithm} = DefaultAlgorithm)\ntransmission(flm::Film, cxr::CharXRay, θ::AbstractFloat = π/2, alg::Type{<:NeXLAlgorithm} = DefaultAlgorithm)\n\nCompute the transmission fraction of an X-ray at the specified angle through a Film.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.transport","page":"API: Structures and Methods","title":"NeXLCore.transport","text":"transport(pc::Electron, mat::Material, ecx=Liljequist1989, bethe=JoyLuo)::NTuple{4, Float64}\n\nThe default function defining elastic scattering and energy loss for an Electron.\n\nReturns ( λ, θ, ϕ, ΔE) where λ is the mean path length, θ is the elastic scatter angle, ϕ is the azimuthal elastic scatter angle and ΔE is the energy loss for transport over the distance λ.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLCore.vₑ-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.vₑ","text":"Electron velocity in cm/s for the specified kinetic energy in eV.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.wavenumber-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.wavenumber","text":"wavenumber(cxr::CharXRay)\n\nX-ray wavenumber in cm¯¹.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.weight-Tuple{Type{<:NeXLCore.WeightNormalization}, CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.weight","text":"weight(::Type{<:WeightNormalization}, cxr::CharXRay)\n\nwhere WeightNormalization is one of the following:\n\nNormalizeByShell normalizes the sum of all the weights associated with a shell to unity.\nNormalizeBySubShell normalizes the sum of all the weights associated with each sub-shell to unity.\nNormalizeToUnity normalizes intensities such that the most intense line in each shell to 1.0.\n\nComputes a rough estimate of the relative intensity of cxr relative to the other characteristic X-rays in its shell, sub-shell etc. The different WeightNormalization modes reflect different ways that the weight(...) function is used.\n\nThe difference between fluorescenceyield(...) and weight(...) is that\n\nfluorescenceyield assumes that a sub-shell in the atom is already ionized\nweight also considers the relative likelihood of ionization of each sub-shell assuming an overvoltage of 4.0.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.wikidata_minerals-Tuple{}","page":"API: Structures and Methods","title":"NeXLCore.wikidata_minerals","text":"wikidata_minerals()::Dict{String, Material}\n\nMineral data based on a WikiData SPARQL query of minerals. Only those minerals which represented distinct (uniquely defined) compositions are included.  Replicas were removed.\n\nAlso includes :Class, :Formula and :Description properties.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.z-Tuple{Element}","page":"API: Structures and Methods","title":"NeXLCore.z","text":"z(elm::Element)\n\nReturn the atomic number of the Element.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.z-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.z","text":"z(mat::Material) = z(Donovan2002, mat)\nz(::Type{NaiveZ|ElectronFraction|AtomicFraction}, mat::Material)\nz(::Type{ElasticFraction}, mat::Material, e::AbstractFloat)\nz(::Type{Donovan2002}, mat::Material; exponent=0.667)\n\nCompute the mean atomic number for a material.\n\nAlgorithms:\n  * NaiveZ - Mass fraction averaging\n  * AtomFraction - Atom fraction averaging\n  * ElectronFraction - Simple electron fraction averaging\n  * ElasticFraction - Scattering cross-section averaged\n  * Donovan2002 - Yukawa/Donovan modified exponent electron fraction averaging\n\nFor more details see Mean Z algorithm in J.J. Donovan, N.E. Pingitore, Microsc. Microanal. 2002 ; 8 , 429 (also see Microsc. Microanal. 27 (Suppl 1), 2021))\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.zbar-Tuple{Material}","page":"API: Structures and Methods","title":"NeXLCore.zbar","text":"zbar(mat::Material)::Float64\n\nThe mean atomic number as calculated using\n\n@article{donovan2003compositional,   title={Compositional averaging of backscatter intensities in compounds},   author={Donovan, John J and Pingitore, Nicholas E and Westphal, Andrew},   journal={Microscopy and Microanalysis},   volume={9},   number={3},   pages={202–215},   year={2003},   publisher={Cambridge University Press} }\n\nor, equivalently,\n\n@article{saldick1954backscattering,   title={Backscattering from Targets of Low Atomic Number Bombarded with 1—2 Mev Electrons},   author={Saldick, Jerome and Allen, Augustine O},   journal={The Journal of Chemical Physics},   volume={22},   number={10},   pages={1777–1777},   year={1954},   publisher={American Institute of Physics} }\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.γₑ-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.γₑ","text":"Relativistic γ for v in cm/s\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.δσδΩ-Tuple{Type{ScreenedRutherford}, Float64, Element, Float64}","page":"API: Structures and Methods","title":"NeXLCore.δσδΩ","text":"δσδΩ(::Type{ScreenedRutherford}, θ::Float64, elm::Element, E::Float64)::Float64\n\nThe differential screened Rutherford cross-section per atom. \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.η-Tuple{Element, Real}","page":"API: Structures and Methods","title":"NeXLCore.η","text":"η(::Type{<:BackscatterCoefficient}, mat::Material, e0::Float64) = #\nη(elm::Element, e0::Real)\n\nModels are: Tomlin1963, LoveScott1978η, Pouchou1991η, August1989η, Reimer1998\n\nThe default backscatter coefficient algorith is August1989η.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.η-Tuple{Type{<:NeXLCore.BackscatterCoefficient}, Material, Float64}","page":"API: Structures and Methods","title":"NeXLCore.η","text":"η([ty::Type{<:BackscatterCoefficient},] mat::Material, e0::Float64)::Float64 =\n\nCalculate the backscatter coefficient for a material using Armstrong's 1991 algorithm for materials.\n\n@incollection{armstrong1991quantitative,   title={Quantitative elemental analysis of individual microparticles with electron beam instruments},   author={Armstrong, John T},   booktitle={Electron probe quantitation},   pages={261–315},   year={1991},   publisher={Springer} }\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.λ-Tuple{CharXRay}","page":"API: Structures and Methods","title":"NeXLCore.λ","text":"λ(cxr::CharXRay)\n\nX-ray wavelength in cm.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.λ-Tuple{Type{<:ScreenedRutherfordType}, Element, Float64, Float64}","page":"API: Structures and Methods","title":"NeXLCore.λ","text":"λ(ty::Type{<:ElasticScatteringCrossSection}, θ::Float64, elm::Element, E::Float64)::Float64\n\nThe mean free path.  The mean distance between elastic scattering events. \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.λₑ-Tuple{Unitful.Quantity}","page":"API: Structures and Methods","title":"NeXLCore.λₑ","text":"λₑ(E::Float64)\n\nWavelength of an electron in cm.\n\nE in eV\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.λₜᵣ-Tuple{Type{<:ElasticScatteringCrossSection}, Element, Float64, Float64}","page":"API: Structures and Methods","title":"NeXLCore.λₜᵣ","text":"λₜᵣ(ty::Type{<:ElasticScatteringCrossSection}, θ::Float64, elm::Element, E::Float64)::Float64\nλₜᵣ(ty::Type{<:ScreenedRutherfordType}, mat::Material, elm::Element, E::Float64)\n\nThe transport mean free path. The mean distance in the initial direction of propagation between elastic scattering events.\n\nN is the number of atoms per cm³\nE is the electron kinetic energy in eV \n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.ξ-Tuple{Type{<:ScreenedRutherfordType}, Element, Float64}","page":"API: Structures and Methods","title":"NeXLCore.ξ","text":"ξ(::Type{<:ScreenedRutherfordType}, elm::Element, E::Float64)::Float64\n\nE in eV\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.σₜ-Tuple{Type{ScreenedRutherford}, Element, Float64}","page":"API: Structures and Methods","title":"NeXLCore.σₜ","text":"σₜ(::Type{ScreenedRutherford}, elm::Element, E::Float64)\nσₜ(::Type{Liljequest1989}, elm::Element, E::Float64)\nσₜ(::Type{Browning1991}, elm::Element, E::Float64)\nσₜ(::Type{Browning1994}, elm::Element, E::Float64)\n\nTotal cross section per atom in cm².\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.σₜᵣ-Tuple{Type{ScreenedRutherford}, Element, Float64}","page":"API: Structures and Methods","title":"NeXLCore.σₜᵣ","text":"σₜᵣ(::Type{ScreenedRutherford}, elm::Element, E::Float64)\n\nThe transport cross-section in cm².  The transport cross-section gives the correct transport mean free path - the mean free path in the direction of initial propagation after an infinite number of collisions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.ϵ-Tuple{Type{<:ScreenedRutherfordType}, Element, Float64}","page":"API: Structures and Methods","title":"NeXLCore.ϵ","text":"ϵ(elm::Element, E::Float64)\n\nScreening factor.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLUncertainties.asa","page":"API: Structures and Methods","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{DataFrame}, mats::AbstractArray{Material}, mode=:MassFraction)\n\nTabulate the composition of a list of materials in a DataFrame.  One column for each element in any of the materials.\n\nmode = :MassFraction | :NormalizedMassFraction | :AtomicFraction.\n\n\n\n\n\n","category":"function"},{"location":"methods/#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame}, Dict{Element, String}}","page":"API: Structures and Methods","title":"NeXLUncertainties.asa","text":"asa(::Type{DataFrame}, links::Dict{Element,String})\n\nCreate a DataFrame which contains a periodic table with links to URLs. This doesn't work so well at the REPL when represented as text but works nicely in HTML.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame}, Material}","page":"API: Structures and Methods","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{DataFrame}, mat::Material)\n\nTabulate the composition of this Material as a DataFrame.  Columns for material name, element abbreviation, atomic number, atomic weight, mass fraction, normalized mass fraction, and atomic fraction. Rows for each element in mat.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLUncertainties.asa-Tuple{Type{Dict}, Material}","page":"API: Structures and Methods","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(Dict, mat::Material)\n\nConvert a Material into a Dict{String, Any} as is suitable for conversion to JSON.\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLUncertainties.asa-Tuple{Type{LaTeXStrings.LaTeXString}, Material}","page":"API: Structures and Methods","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{LaTeXString}, mat::Material; parsename=true, order = :massfraction | :z)\n\nConverts a Material into a LaTeXString.  parsename controls whether the material name is assumed to be a parsable chemical formula (according to \\ce{...}).\n\n\n\n\n\n","category":"method"},{"location":"methods/#Statistics.mean-Tuple{AbstractArray{<:Material}}","page":"API: Structures and Methods","title":"Statistics.mean","text":"Statistics.mean(mats::AbstractArray{<:Material})\n\nIf the mass fractions for all the elements in all mats have non-zero uncertainties then the variance weighted mean is calculated and the result will have associated  uncertainties.  Otherwise, the straight floating-point mean is calculated and the result won't have uncertainties.  This is because even a single value with zero uncertainty will poison the variance weighted mean (produce a NaN).\n\n\n\n\n\n","category":"method"},{"location":"methods/#NeXLCore.@n_str-Tuple{Any}","page":"API: Structures and Methods","title":"NeXLCore.@n_str","text":"n\"Fe\"\n\nImplements compile time parsing of strings to produce Element, SubShell, AtomicSubShell, Transition or CharXRay objects.  The only oddity is that to get SubShell(\"K\") you must enter n\"K1\" to differentiate the sub-shell from potassium. Examples:\n\nn\"Fe\" == elements[26]\nn\"K\" == elements[19]\nn\"K1\" == subshell(\"K\")\nn\"L3\" == subshell(\"L3\")\nn\"Fe L3\" == AtomicSubShell(elements[26],subshell(\"L3\"))\nn\"L3-M5\" == Transition(SubShell(\"L3\"),\"SubShell(\"M5\"))\nn\"Fe L3-M5\" == CharXRay(elements[26],Transition(SubShell(\"L3\"),\"SubShell(\"M5\"))\n\n\n\n\n\n","category":"macro"},{"location":"#![](NeXL_sm.png)Core-Part-of-the-NeXL-X-ray-Microanalysis-Library","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"","category":"section"},{"location":"#Installing-NeXLCore.jl","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"Installing NeXLCore.jl","text":"","category":"section"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"NeXLCore is available throught the standard Julia registry and can be installed using the standard package manager.","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"julia> ]add NeXLCore","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"or","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"julia> using Pkg\njulia> Pkg.add(\"NeXLCore\")","category":"page"},{"location":"#Using-NeXLCore","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"Using NeXLCore","text":"","category":"section"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"NeXLCore provides the core data and algorithms used throughout the NeXL libraries for elemental and X-ray-related data and calculations.","category":"page"},{"location":"#Standards","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"Standards","text":"","category":"section"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"For consistency, function arguments and outputs will be use the following standard (unless otherwise mentioned.)","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"All lengths are in centimeters\nAll masses are in grams\nAll energies are in eV\nAll angles are in radians\nMixed units are in combinations of these units (MACs are in cm²/g etc.)","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"The special macro n\"...\" has been defined to make constructing objects representing elements, subshells, atomic shells, transitions and characteristic x-rays quick and easy.","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"Examples:","category":"page"},{"location":"","page":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )Core - Part of the NeXL X-ray Microanalysis Library","text":"n\"Fe\" == element(26)\nn\"L3\" == subshell(\"L3\")\nn\"Fe L3\" == atomicsubshell(n\"Fe\",shell(\"L3\"))\nn\"L3-M5\" == transition(shell(\"L3\"),shell(\"M5\"))\nn\"Fe L3-M5\" == CharXRay(26, transition(shell(\"L3\"),shell(\"M5\")))","category":"page"},{"location":"meanionizationpotential/#Comparing-J-(mean-ionization-potential)-Models","page":"Mean Ionization Potential","title":"Comparing J (mean ionization potential) Models","text":"","category":"section"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"The mean ionization potential is a a crude estimate of how much energy an energetic electron will lose traversing a pure element in a continuous slowing down model.","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"fracdelta Edelta rho z = frac2 pi e^4 ZA E log(1166 fracEJ) in fraceV cm^2g","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"using NeXLCore\nusing Gadfly","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"algs = Iterators.reverse( (Bloch1933, Jensen1937, Wilson1941, Sternheimer1964, Springer1967, Zeller1973, Brizuela1990, Berger1982,) )\nzs = 1:99\ncolors = Scale.color_discrete_hue().f(length(algs))\nlayers = [ layer(x = zs, y = map(z->J(alg,z),zs), Theme(default_color=color(colors[i]))) for (i,alg) in enumerate(algs) ]\nplot(layers..., Guide.manual_color_key(\"Algorithm\", collect(repr.(algs)), colors),\n  Guide.xlabel(\"Atomic Number (Z)\"), Guide.ylabel(\"eV\"))","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"(Image: )","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"Looking more close at the important low-Z end.","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"algs = Iterators.reverse( (Bloch1933, Jensen1937, Wilson1941, Sternheimer1964, Springer1967, Zeller1973, Brizuela1990, Berger1982,) )\nzs = 1:20\ncolors = Scale.color_discrete_hue().f(length(algs))\nlayers = [ layer(x = zs, y = map(z->J(alg,z),zs), Theme(default_color=color(colors[i]))) for (i,alg) in enumerate(algs) ]\nplot(layers..., Guide.manual_color_key(\"Algorithm\", collect(repr.(algs)), colors),\n  Guide.xlabel(\"Atomic Number (Z)\"), Guide.ylabel(\"eV\"))","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"(Image: )","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"If we presume that Berger (1982) is the most accurate, then Zeller (1975) is about as good as it gets for the analytical expressions.","category":"page"},{"location":"meanionizationpotential/","page":"Mean Ionization Potential","title":"Mean Ionization Potential","text":"If we assume that each element acts independently, the we would expect that fracdelta Edelta rho z = sum_z C_z frac2 pi e^4 ZA E log(1166 fracEJ_z) where C_z is the mass-fraction of element z.","category":"page"}]
}
